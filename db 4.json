{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/blog_avatar.jpeg","path":"medias/blog_avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"c9f8f5ec6095692fd33dea7853275110a52603e4","modified":1607999362018},{"_id":"source/.DS_Store","hash":"2cf99b7f7c41372e8f30fa410687ddc989474576","modified":1639924453568},{"_id":"source/CNAME","hash":"4f01eece4678883fa9e5db4bbe59ed5c01d55583","modified":1651236576066},{"_id":"source/404.md","hash":"d8941d95ca8cfbefd576e208b21116cdb53fee86","modified":1600659063514},{"_id":"source/_posts/2020-09-21-博客介绍.md","hash":"40433a9df7cfe99f76838f60b83d62fd5595d6c1","modified":1650529046699},{"_id":"source/_data/friends.json","hash":"c96d322708774ef7fda90d4eedefde55b6b9d0ea","modified":1602300137960},{"_id":"source/_posts/2020-09-22-React性能优化的几种方式.md","hash":"975a69c29666cc74bc0baf36ee35a83aba41f4b5","modified":1650529068138},{"_id":"source/_posts/2020-10-12-前端部署个人小记.md","hash":"d94fa89350bb0ff92e71c7262dfe38a6ffe2f113","modified":1651230774315},{"_id":"source/_posts/2020-09-30-黑神话-悟空.md","hash":"3fd13bab3f961eeddf888916a23388ef7a19bbd1","modified":1650529104307},{"_id":"source/_posts/2021-03-12-前端常用布局.md","hash":"27fa152c00311ccea828b988ca24c36057319b73","modified":1650530191997},{"_id":"source/_posts/2020-10-21-ES6-Set-Map.md","hash":"64000cccc7541ebf3e5664228da1fc472f22aa30","modified":1651230557176},{"_id":"source/_posts/2020-11-20-前端常用单位介绍.md","hash":"ebb30cc83dd21d1be3f733d57c0cb314262e0a44","modified":1650530186248},{"_id":"source/_posts/2021-05-31-关于防抖、节流.md","hash":"5b5477c205fbb3020da0d3c54c42f6ddbece0b80","modified":1651230891320},{"_id":"source/_posts/2021-10-15-dockerの小试牛刀.md","hash":"2e12a90c632a57515fee316c2166894a687c5be2","modified":1650530219635},{"_id":"source/about/index.md","hash":"f3c1e41e174023bd205644336d8a0fd349bafc69","modified":1600658445265},{"_id":"source/friends/index.md","hash":"6e1dd584fb9b6659b5c077d70ac216f977b226b5","modified":1600658595021},{"_id":"source/categories/index.md","hash":"06b90bf56ff682352a8ea5ad09beac81862a6022","modified":1600656802111},{"_id":"source/_posts/2021-04-15-音乐小馆.md","hash":"9765750108b4bf423013d843aa029b569463cc43","modified":1650530200507},{"_id":"source/contact/index.md","hash":"12b8d7454e1df60c40f2291d00cd368fad12c20c","modified":1600659143351},{"_id":"source/tags/index.md","hash":"59f95e0a6b9153862fc87eff02262ba0fc91baec","modified":1600656992144},{"_id":"source/_drafts/demo.md","hash":"02d9a708608f41e3e34555f85d27c473c388dcc1","modified":1600392300336},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1600655851615},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1600655851615},{"_id":"themes/hexo-theme-matery/README.md","hash":"56299cf1fe60a11fef61b3948fe148f995df747e","modified":1600655851615},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"0fdf818476a444663cc8ffa2f194199d9fd93508","modified":1600655851615},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1600655851616},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1600655851616},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"d61532ff7d129e9b813833876bc3880aad86f85a","modified":1611969605208},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"d9306e73154f6d111c5953bf8998d1df4ccfbe1c","modified":1611972208258},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1600655851625},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1600655851616},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1600655851616},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1600655851626},{"_id":"themes/hexo-theme-matery/layout/.DS_Store","hash":"2b66709994cf01ad90332f9617d58f8604d13cd9","modified":1600912052225},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1600655851626},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1600655851626},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"f5d6459bed0f4ecb214f2dbff5b2207a80c44f66","modified":1600655851627},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"22125624381b8d4dd50cb17ffe0631c838557364","modified":1600655851627},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"e50266188ff02d5a03ba427b65f61059cde2292c","modified":1600655851627},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1600655851627},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1600655851627},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1600655851627},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"7de5650cb3b0a37a6c565ab30e1deb67e8f26900","modified":1611969605207},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1600655851626},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1600655851629},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1600655851617},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1600655851617},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"88158d6f6370e2e99616b6c61c5d57cb296565fd","modified":1611970799953},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1600655851617},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1600655851617},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1600655851617},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1600655851618},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1600655851617},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"4b5476478ba12183b7c97a33d5545fc53be362a8","modified":1600655851617},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1600655851618},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1600655851618},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"8d263ebccccd0f9e69539f402955296de6f24a62","modified":1600655851618},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1600655851618},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1601189762476},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1600655851618},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"44f48fe3ba40ebb35e80d1119298a17dd7f1cedd","modified":1600850035131},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cd6662d7facb7be8ca1c7d7dab32a30a0409010a","modified":1600850081240},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1600655851620},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1600655851619},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"d05926e79aa6dfc235193b9d8c6aa03118b0eade","modified":1600655851620},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1600655851620},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1600655851620},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1600655851621},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1600655851622},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"b39db4e38cf230a83e83dbbfae5560519f59abfa","modified":1600655851622},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1600655851621},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1600655851622},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"ff3ceb93a03af5d9d120710347570ecaafc00979","modified":1600655851620},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1600655851623},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1600655851623},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1600655851622},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1600655851623},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1600655851624},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1600655851623},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1600655851623},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1600655851624},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1600655851624},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"fe6a6d5e83c283d6ffbcc859a372177f8783e49c","modified":1600655851625},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1600655851625},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1600655851624},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1600655851628},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1600655851625},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"64eb56b9442cdf3e584d8596974271a1f5ab6992","modified":1600845379774},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"fb172346e11de1139e2bb0de09b33cc56fe7e28e","modified":1616576335634},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1600655851629},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1600655851628},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1600655851628},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1600655851629},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1600655851682},{"_id":"themes/hexo-theme-matery/source/medias/blog_avatar.jpeg","hash":"68061055eed4a2e1cbb28d423189296bfff6bb3e","modified":1600669242893},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1600655851682},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"5499d91686d635e1760193c027b3acda04431421","modified":1619658047729},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1600655851629},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1600655851630},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1600655851630},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1600655851624},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1600655851648},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1600655851630},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1600655851648},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1600655851631},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1600655851648},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1600655851648},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1600655851648},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1600655851649},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1600655851649},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1600655851649},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1600655851649},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1600655851650},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1600655851654},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1600655851656},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1600655851656},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1600655851657},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1600655851657},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1600655851660},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1600655851662},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1600655851662},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1600655851663},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1600655851665},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1600655851665},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"55c609412ca3510017980ab7b476d0a0f20dc5c9","modified":1600680818909},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/.DS_Store","hash":"ae0080146c1aa5eba6510cdf2705580e9b357615","modified":1611969424876},{"_id":"themes/hexo-theme-matery/source/medias/banner/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1611975235092},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1600655851638},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1600655851640},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1600655851640},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1600655851640},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1600655851658},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1600655851658},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1600655851658},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1600655851659},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1600655851659},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1600655851659},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1600655851659},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1600655851659},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1600655851659},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1600655851663},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1600655851663},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1600655851660},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1600655851663},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1600655851000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1600655851664},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1600655851664},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1600655851664},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1600655851656},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1600655851650},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1600655851658},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1600655851665},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1600655851000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"1eedd241e0188c362da107ceb811f3b077ebb670","modified":1600680566052},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1601189706708},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1600655851637},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1600655851637},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1600655851632},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1600655851638},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1600655851647},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1600655851647},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1600655851655},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1600655851661},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1600655851662},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1600655851666},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1600655851639},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1600655851641},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1600655851647},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1600655851636},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1600655851654},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1600655851645}],"Category":[{"name":"生活","_id":"cl96nzsge0004uwx2d2eddux1"},{"name":"技术","_id":"cl96nzsgk000cuwx2a5q0fi0n"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2020-09-21T03:31:03.514Z","path":"404.html","comments":1,"_id":"cl96nzsg30000uwx23g1e8ag2","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-09-21T02:58:08.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-09-21 10:58:08\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-09-21T03:20:45.265Z","path":"about/index.html","comments":1,"_id":"cl96nzsgc0002uwx2fj6ug387","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-09-21T03:23:00.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-09-21 11:23:00\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2020-09-21T03:23:15.021Z","path":"friends/index.html","comments":1,"_id":"cl96nzsgh0006uwx2brtz81i4","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-09-21T02:52:03.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-09-21 10:52:03\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-09-21T02:53:22.111Z","path":"categories/index.html","comments":1,"_id":"cl96nzsgi0008uwx2679j42m8","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-09-21T03:32:03.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-09-21 11:32:03\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-09-21T03:32:23.351Z","path":"contact/index.html","comments":1,"_id":"cl96nzsgk000auwx26smp9hqh","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-09-21T02:56:20.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-21 10:56:20\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-09-21T02:56:32.144Z","path":"tags/index.html","comments":1,"_id":"cl96nzsgm000fuwx2bfb34zor","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":""}],"Post":[{"title":"博客介绍","date":"2020-09-21T01:54:51.000Z","img":"https://cdn.ldpro.top/cover/myBlog.jpg","_content":"\nhexo搭建的一个博客，部署在自己的服务器上，接下来可能会买一个域名\n\n搭博客的目的不为别的，就是闲的。没事的时候我会在上面写一些文章，可能是生活上的琐事，或者是一些技术类文章，或者一些音乐，电影，美剧啥的，甚至可能是一些天马行空的想法。。\n\n其实很早就有搞一个博客的想法了，程序员也不是非得搞什么技术博客，博客首先就是一个记录分享的平台，也是自己的一个小家。在如今人人都是社畜的时代，与其拼搏一辈子为了一个火柴盒，倒不如把自己这个虚拟的小家好好修缮一下，也算是一种心灵的寄托～，嗯--自己把自己都说动了><\n\n总之，更新随缘，大家也就看看图一乐吧","source":"_posts/2020-09-21-博客介绍.md","raw":"---\ntitle: 博客介绍\ndate: 2020-09-21 09:54:51\ncategories: [生活]\nimg: https://cdn.ldpro.top/cover/myBlog.jpg\ntags: \n- 博客\n---\n\nhexo搭建的一个博客，部署在自己的服务器上，接下来可能会买一个域名\n\n搭博客的目的不为别的，就是闲的。没事的时候我会在上面写一些文章，可能是生活上的琐事，或者是一些技术类文章，或者一些音乐，电影，美剧啥的，甚至可能是一些天马行空的想法。。\n\n其实很早就有搞一个博客的想法了，程序员也不是非得搞什么技术博客，博客首先就是一个记录分享的平台，也是自己的一个小家。在如今人人都是社畜的时代，与其拼搏一辈子为了一个火柴盒，倒不如把自己这个虚拟的小家好好修缮一下，也算是一种心灵的寄托～，嗯--自己把自己都说动了><\n\n总之，更新随缘，大家也就看看图一乐吧","slug":"博客介绍","published":1,"updated":"2022-04-21T08:17:26.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsg90001uwx2eenc6occ","content":"<p>hexo搭建的一个博客，部署在自己的服务器上，接下来可能会买一个域名</p>\n<p>搭博客的目的不为别的，就是闲的。没事的时候我会在上面写一些文章，可能是生活上的琐事，或者是一些技术类文章，或者一些音乐，电影，美剧啥的，甚至可能是一些天马行空的想法。。</p>\n<p>其实很早就有搞一个博客的想法了，程序员也不是非得搞什么技术博客，博客首先就是一个记录分享的平台，也是自己的一个小家。在如今人人都是社畜的时代，与其拼搏一辈子为了一个火柴盒，倒不如把自己这个虚拟的小家好好修缮一下，也算是一种心灵的寄托～，嗯–自己把自己都说动了&gt;&lt;</p>\n<p>总之，更新随缘，大家也就看看图一乐吧</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<p>hexo搭建的一个博客，部署在自己的服务器上，接下来可能会买一个域名</p>\n<p>搭博客的目的不为别的，就是闲的。没事的时候我会在上面写一些文章，可能是生活上的琐事，或者是一些技术类文章，或者一些音乐，电影，美剧啥的，甚至可能是一些天马行空的想法。。</p>\n<p>其实很早就有搞一个博客的想法了，程序员也不是非得搞什么技术博客，博客首先就是一个记录分享的平台，也是自己的一个小家。在如今人人都是社畜的时代，与其拼搏一辈子为了一个火柴盒，倒不如把自己这个虚拟的小家好好修缮一下，也算是一种心灵的寄托～，嗯–自己把自己都说动了&gt;&lt;</p>\n<p>总之，更新随缘，大家也就看看图一乐吧</p>\n"},{"title":"React性能优化的几种方式","date":"2020-09-22T01:11:31.000Z","keywords":"React性能优化","img":"https://cdn.ldpro.top/cover/c1.jpg","_content":"\n### 前言\nReact的性能优化大都是交由用户自己来做的，主要体现在减少不必要的渲染，减少不必要的js计算，从而达到性能优化的目的\n\n### class组件\n1. **PureComponent**\n优点：使用方便； 缺点：仅做浅层比较，对于复杂数据结构无法正确识别\n\n2. **shouldComponentUpdate**\n这个大家都知道，也是最常用的，前提是不可以用PureComponent\n使用方式：\n```javascript\n(nextProps, nextState) => boolean\n```\n<font color=red size=2> *不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能；现在React正逐步减少shouldComponentUpdate的重要性 </font>\n\n### function组件\n1. **React.memo**\n可以这么理解，React.memo = PureComponent + shouldComponentUpdate；因为它也是做浅层对比，也和should一样有具体的手动控制方法\n不过memo的原理是记忆缓存上一次的渲染结果，而should是直接跳过更新\n使用方法：\n\n```javascript\nconst MyComponent = React.memo(function MyComponent(props) {\n  /* 使用 props 渲染 */\n}, (prevProps, nextProps) => boolean);\n```\n<font color=red size=2>*注意后面的回调函数返回结果和should是相反的</font>\n\n2. **React.useMemo(Hooks)**\n```javascript\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\nReact官方定义：\n> 把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。\n通俗易懂的解释下：该方法接收两个参数，第一个是一个函数，返回一个值，第二个是他的依赖项，只有当依赖项里的值发生变化了，前面那个函数才会重新计算，否则不会重新计算，套用上次缓存下来的值，避免无用的js计算。\n*特地去搭了个服务演示一下，下面是我的代码:*\n```javascript\nimport React from \"react\";\n\nfunction App() {\n  const [num, setNum] = React.useState(1);\n  const [str, setStr] = React.useState(\"yeah\");\n  const value = () => {\n    console.log(\"重新计算了嗷\");\n    return str + \"~~\";\n  };\n  // const memoValue = React.useMemo(value,[str])\n  console.log('1')\n  return (\n    <div>\n      <h1>在线调试页面</h1>\n      <span>{value()}</span>\n      <button onClick={() => setNum(num + 1)}>改变num</button>\n      <button onClick={() => setStr(str + '-')}>改变str</button>\n    </div>\n  );\n}\n\nexport default App;\n```\n首先是没有用memo的情况，value的结果完全是跟着str走的，按理说我们想看到的是点击第一个按钮不触发重新计算，但是它计算了，因为React的机制，页面的state改变了，就会重新渲染，那么return里的代码会重新走一遍；\n<img src = 'https://ftp.bmp.ovh/imgs/2020/09/3f478f113119cd7a.jpg' width=360 />\n上图是我分别点击了两个按钮之后触发的console，接下来试试useMemo\n```javascript\nimport React from \"react\";\n\nfunction App() {\n  const [num, setNum] = React.useState(1);\n  const [str, setStr] = React.useState(\"yeah\");\n  const value = () => {\n    console.log(\"重新计算了嗷\");\n    return str + \"~~\";\n  };\n  const memoValue = React.useMemo(value,[str])\n  console.log('1')\n  return (\n    <div>\n      <h1>在线调试页面</h1>\n      <span>{memoValue}</span>\n      <button onClick={() => setNum(num + 1)}>改变num</button>\n      <button onClick={() => setStr(str + '-')}>改变str</button>\n    </div>\n  );\n}\n\nexport default App;\n```\n再次点击两个按钮:\n<img src = 'https://ftp.bmp.ovh/imgs/2020/09/0664e7ce9c69d8ed.jpg' width=360 />\n显然，虽然页面重新渲染了，但是value没有重新计算了，是不是很神奇～\n例子只是很简单的一个展示，当计算开销大的时候，比如有多次循环或者递归啥的，这性能优化可就明显了\n\n3. **React.useCallback**\n``` javascript\nconst memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n```\n和useMemo没什么差别，区别是返回的是一个回调函数，memo返回的是值\n\n目前想到的就是这些，也是比较常用的，后续有其他的想法会继续更新～","source":"_posts/2020-09-22-React性能优化的几种方式.md","raw":"---\ntitle: React性能优化的几种方式\ndate: 2020-09-22 09:11:31\nkeywords: React性能优化\ncategories: [技术]\nimg: https://cdn.ldpro.top/cover/c1.jpg\ntags: \n- React\n- 性能优化\n---\n\n### 前言\nReact的性能优化大都是交由用户自己来做的，主要体现在减少不必要的渲染，减少不必要的js计算，从而达到性能优化的目的\n\n### class组件\n1. **PureComponent**\n优点：使用方便； 缺点：仅做浅层比较，对于复杂数据结构无法正确识别\n\n2. **shouldComponentUpdate**\n这个大家都知道，也是最常用的，前提是不可以用PureComponent\n使用方式：\n```javascript\n(nextProps, nextState) => boolean\n```\n<font color=red size=2> *不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能；现在React正逐步减少shouldComponentUpdate的重要性 </font>\n\n### function组件\n1. **React.memo**\n可以这么理解，React.memo = PureComponent + shouldComponentUpdate；因为它也是做浅层对比，也和should一样有具体的手动控制方法\n不过memo的原理是记忆缓存上一次的渲染结果，而should是直接跳过更新\n使用方法：\n\n```javascript\nconst MyComponent = React.memo(function MyComponent(props) {\n  /* 使用 props 渲染 */\n}, (prevProps, nextProps) => boolean);\n```\n<font color=red size=2>*注意后面的回调函数返回结果和should是相反的</font>\n\n2. **React.useMemo(Hooks)**\n```javascript\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\nReact官方定义：\n> 把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。\n通俗易懂的解释下：该方法接收两个参数，第一个是一个函数，返回一个值，第二个是他的依赖项，只有当依赖项里的值发生变化了，前面那个函数才会重新计算，否则不会重新计算，套用上次缓存下来的值，避免无用的js计算。\n*特地去搭了个服务演示一下，下面是我的代码:*\n```javascript\nimport React from \"react\";\n\nfunction App() {\n  const [num, setNum] = React.useState(1);\n  const [str, setStr] = React.useState(\"yeah\");\n  const value = () => {\n    console.log(\"重新计算了嗷\");\n    return str + \"~~\";\n  };\n  // const memoValue = React.useMemo(value,[str])\n  console.log('1')\n  return (\n    <div>\n      <h1>在线调试页面</h1>\n      <span>{value()}</span>\n      <button onClick={() => setNum(num + 1)}>改变num</button>\n      <button onClick={() => setStr(str + '-')}>改变str</button>\n    </div>\n  );\n}\n\nexport default App;\n```\n首先是没有用memo的情况，value的结果完全是跟着str走的，按理说我们想看到的是点击第一个按钮不触发重新计算，但是它计算了，因为React的机制，页面的state改变了，就会重新渲染，那么return里的代码会重新走一遍；\n<img src = 'https://ftp.bmp.ovh/imgs/2020/09/3f478f113119cd7a.jpg' width=360 />\n上图是我分别点击了两个按钮之后触发的console，接下来试试useMemo\n```javascript\nimport React from \"react\";\n\nfunction App() {\n  const [num, setNum] = React.useState(1);\n  const [str, setStr] = React.useState(\"yeah\");\n  const value = () => {\n    console.log(\"重新计算了嗷\");\n    return str + \"~~\";\n  };\n  const memoValue = React.useMemo(value,[str])\n  console.log('1')\n  return (\n    <div>\n      <h1>在线调试页面</h1>\n      <span>{memoValue}</span>\n      <button onClick={() => setNum(num + 1)}>改变num</button>\n      <button onClick={() => setStr(str + '-')}>改变str</button>\n    </div>\n  );\n}\n\nexport default App;\n```\n再次点击两个按钮:\n<img src = 'https://ftp.bmp.ovh/imgs/2020/09/0664e7ce9c69d8ed.jpg' width=360 />\n显然，虽然页面重新渲染了，但是value没有重新计算了，是不是很神奇～\n例子只是很简单的一个展示，当计算开销大的时候，比如有多次循环或者递归啥的，这性能优化可就明显了\n\n3. **React.useCallback**\n``` javascript\nconst memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n```\n和useMemo没什么差别，区别是返回的是一个回调函数，memo返回的是值\n\n目前想到的就是这些，也是比较常用的，后续有其他的想法会继续更新～","slug":"React性能优化的几种方式","published":1,"updated":"2022-04-21T08:17:48.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgd0003uwx27tzmaqaj","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>React的性能优化大都是交由用户自己来做的，主要体现在减少不必要的渲染，减少不必要的js计算，从而达到性能优化的目的</p>\n<h3 id=\"class组件\"><a href=\"#class组件\" class=\"headerlink\" title=\"class组件\"></a>class组件</h3><ol>\n<li><p><strong>PureComponent</strong><br>优点：使用方便； 缺点：仅做浅层比较，对于复杂数据结构无法正确识别</p>\n</li>\n<li><p><strong>shouldComponentUpdate</strong><br>这个大家都知道，也是最常用的，前提是不可以用PureComponent<br>使用方式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> boolean<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><font color=red size=2> *不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能；现在React正逐步减少shouldComponentUpdate的重要性 </font></p>\n</li>\n</ol>\n<h3 id=\"function组件\"><a href=\"#function组件\" class=\"headerlink\" title=\"function组件\"></a>function组件</h3><ol>\n<li><strong>React.memo</strong><br>可以这么理解，React.memo = PureComponent + shouldComponentUpdate；因为它也是做浅层对比，也和should一样有具体的手动控制方法<br>不过memo的原理是记忆缓存上一次的渲染结果，而should是直接跳过更新<br>使用方法：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* 使用 props 渲染 */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><font color=red size=2>*注意后面的回调函数返回结果和should是相反的</font></p>\n<ol start=\"2\">\n<li><strong>React.useMemo(Hooks)</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\nReact官方定义：<blockquote>\n<p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。<br>通俗易懂的解释下：该方法接收两个参数，第一个是一个函数，返回一个值，第二个是他的依赖项，只有当依赖项里的值发生变化了，前面那个函数才会重新计算，否则不会重新计算，套用上次缓存下来的值，避免无用的js计算。</p>\n</blockquote>\n</li>\n</ol>\n<p><em>特地去搭了个服务演示一下，下面是我的代码:</em></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> setNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> setStr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yeah\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重新计算了嗷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> str <span class=\"token operator\">+</span> <span class=\"token string\">\"~~\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// const memoValue = React.useMemo(value,[str])</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>在线调试页面<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNum</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>改变num<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setStr</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>改变str<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先是没有用memo的情况，value的结果完全是跟着str走的，按理说我们想看到的是点击第一个按钮不触发重新计算，但是它计算了，因为React的机制，页面的state改变了，就会重新渲染，那么return里的代码会重新走一遍；<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/3f478f113119cd7a.jpg' width=360 /><br>上图是我分别点击了两个按钮之后触发的console，接下来试试useMemo</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> setNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> setStr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yeah\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重新计算了嗷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> str <span class=\"token operator\">+</span> <span class=\"token string\">\"~~\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> memoValue <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>在线调试页面<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>memoValue<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNum</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>改变num<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setStr</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>改变str<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再次点击两个按钮:<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/0664e7ce9c69d8ed.jpg' width=360 /><br>显然，虽然页面重新渲染了，但是value没有重新计算了，是不是很神奇～<br>例子只是很简单的一个展示，当计算开销大的时候，比如有多次循环或者递归啥的，这性能优化可就明显了</p>\n<ol start=\"3\">\n<li><strong>React.useCallback</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n和useMemo没什么差别，区别是返回的是一个回调函数，memo返回的是值</li>\n</ol>\n<p>目前想到的就是这些，也是比较常用的，后续有其他的想法会继续更新～</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>React的性能优化大都是交由用户自己来做的，主要体现在减少不必要的渲染，减少不必要的js计算，从而达到性能优化的目的</p>\n<h3 id=\"class组件\"><a href=\"#class组件\" class=\"headerlink\" title=\"class组件\"></a>class组件</h3><ol>\n<li><p><strong>PureComponent</strong><br>优点：使用方便； 缺点：仅做浅层比较，对于复杂数据结构无法正确识别</p>\n</li>\n<li><p><strong>shouldComponentUpdate</strong><br>这个大家都知道，也是最常用的，前提是不可以用PureComponent<br>使用方式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> boolean<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><font color=red size=2> *不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能；现在React正逐步减少shouldComponentUpdate的重要性 </font></p>\n</li>\n</ol>\n<h3 id=\"function组件\"><a href=\"#function组件\" class=\"headerlink\" title=\"function组件\"></a>function组件</h3><ol>\n<li><strong>React.memo</strong><br>可以这么理解，React.memo = PureComponent + shouldComponentUpdate；因为它也是做浅层对比，也和should一样有具体的手动控制方法<br>不过memo的原理是记忆缓存上一次的渲染结果，而should是直接跳过更新<br>使用方法：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* 使用 props 渲染 */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><font color=red size=2>*注意后面的回调函数返回结果和should是相反的</font></p>\n<ol start=\"2\">\n<li><strong>React.useMemo(Hooks)</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\nReact官方定义：<blockquote>\n<p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。<br>通俗易懂的解释下：该方法接收两个参数，第一个是一个函数，返回一个值，第二个是他的依赖项，只有当依赖项里的值发生变化了，前面那个函数才会重新计算，否则不会重新计算，套用上次缓存下来的值，避免无用的js计算。</p>\n</blockquote>\n</li>\n</ol>\n<p><em>特地去搭了个服务演示一下，下面是我的代码:</em></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> setNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> setStr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yeah\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重新计算了嗷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> str <span class=\"token operator\">+</span> <span class=\"token string\">\"~~\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// const memoValue = React.useMemo(value,[str])</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>在线调试页面<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNum</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>改变num<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setStr</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>改变str<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先是没有用memo的情况，value的结果完全是跟着str走的，按理说我们想看到的是点击第一个按钮不触发重新计算，但是它计算了，因为React的机制，页面的state改变了，就会重新渲染，那么return里的代码会重新走一遍；<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/3f478f113119cd7a.jpg' width=360 /><br>上图是我分别点击了两个按钮之后触发的console，接下来试试useMemo</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> setNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> setStr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yeah\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重新计算了嗷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> str <span class=\"token operator\">+</span> <span class=\"token string\">\"~~\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> memoValue <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>在线调试页面<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>memoValue<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNum</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>改变num<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setStr</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>改变str<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再次点击两个按钮:<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/0664e7ce9c69d8ed.jpg' width=360 /><br>显然，虽然页面重新渲染了，但是value没有重新计算了，是不是很神奇～<br>例子只是很简单的一个展示，当计算开销大的时候，比如有多次循环或者递归啥的，这性能优化可就明显了</p>\n<ol start=\"3\">\n<li><strong>React.useCallback</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n和useMemo没什么差别，区别是返回的是一个回调函数，memo返回的是值</li>\n</ol>\n<p>目前想到的就是这些，也是比较常用的，后续有其他的想法会继续更新～</p>\n"},{"title":"黑神话:悟空","date":"2020-09-30T06:10:18.000Z","img":"https://cdn.ldpro.top/wukong.jpeg","_content":"**我TM吹爆!!!**\n在国内低质量手游网游遍地走的大环境下，截止目前，几乎没有什么拿的出手的3A单机游戏，对于一个游戏爱好者来说，惜哉痛哉！\n而现在，一款大作正在孕育而生！\n### 游戏截图\n<img src=\"https://cdn.ldpro.top/wukong.jpeg\" width=\"100%\" />\n\n《黑神话：悟空》的开发商为游戏科学公司，《战争艺术：赤潮》就是他们开发的手游，也是他们现在主要的收入来源；一个小规模团队可以做出这样的产品，证明他们是有实力和梦想的，也希望他们可以成为国内单机游戏的先驱者，我对这款游戏表示支持!\n\n### 宣传视频\n<video controls width=\"100%\" src=\"https://www.heishenhua.com/video/b1/gamesci_wukong.mp4\"></video>\n\n-------------\n### 想法\n游戏官网：[《黑神话：悟空》](http://www.heishenhua.com/)\n看了宣传视频后，真的好想玩！不知道我的1660s带不带的动😂\n","source":"_posts/2020-09-30-黑神话-悟空.md","raw":"---\ntitle: \"黑神话:悟空\"\ndate: 2020-09-30 14:10:18\ncategories: [生活]\nimg: https://cdn.ldpro.top/wukong.jpeg\ntags:\n  - 游戏\n  - 国产3A大作\n  - 单机\n---\n**我TM吹爆!!!**\n在国内低质量手游网游遍地走的大环境下，截止目前，几乎没有什么拿的出手的3A单机游戏，对于一个游戏爱好者来说，惜哉痛哉！\n而现在，一款大作正在孕育而生！\n### 游戏截图\n<img src=\"https://cdn.ldpro.top/wukong.jpeg\" width=\"100%\" />\n\n《黑神话：悟空》的开发商为游戏科学公司，《战争艺术：赤潮》就是他们开发的手游，也是他们现在主要的收入来源；一个小规模团队可以做出这样的产品，证明他们是有实力和梦想的，也希望他们可以成为国内单机游戏的先驱者，我对这款游戏表示支持!\n\n### 宣传视频\n<video controls width=\"100%\" src=\"https://www.heishenhua.com/video/b1/gamesci_wukong.mp4\"></video>\n\n-------------\n### 想法\n游戏官网：[《黑神话：悟空》](http://www.heishenhua.com/)\n看了宣传视频后，真的好想玩！不知道我的1660s带不带的动😂\n","slug":"黑神话-悟空","published":1,"updated":"2022-04-21T08:18:24.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgh0007uwx26ylu8fqi","content":"<p><strong>我TM吹爆!!!</strong><br>在国内低质量手游网游遍地走的大环境下，截止目前，几乎没有什么拿的出手的3A单机游戏，对于一个游戏爱好者来说，惜哉痛哉！<br>而现在，一款大作正在孕育而生！</p>\n<h3 id=\"游戏截图\"><a href=\"#游戏截图\" class=\"headerlink\" title=\"游戏截图\"></a>游戏截图</h3><img src=\"https://cdn.ldpro.top/wukong.jpeg\" width=\"100%\" />\n\n<p>《黑神话：悟空》的开发商为游戏科学公司，《战争艺术：赤潮》就是他们开发的手游，也是他们现在主要的收入来源；一个小规模团队可以做出这样的产品，证明他们是有实力和梦想的，也希望他们可以成为国内单机游戏的先驱者，我对这款游戏表示支持!</p>\n<h3 id=\"宣传视频\"><a href=\"#宣传视频\" class=\"headerlink\" title=\"宣传视频\"></a>宣传视频</h3><p><video controls width=\"100%\" src=\"https://www.heishenhua.com/video/b1/gamesci_wukong.mp4\"></video></p>\n<hr>\n<h3 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h3><p>游戏官网：<a href=\"http://www.heishenhua.com/\">《黑神话：悟空》</a><br>看了宣传视频后，真的好想玩！不知道我的1660s带不带的动😂</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<p><strong>我TM吹爆!!!</strong><br>在国内低质量手游网游遍地走的大环境下，截止目前，几乎没有什么拿的出手的3A单机游戏，对于一个游戏爱好者来说，惜哉痛哉！<br>而现在，一款大作正在孕育而生！</p>\n<h3 id=\"游戏截图\"><a href=\"#游戏截图\" class=\"headerlink\" title=\"游戏截图\"></a>游戏截图</h3><img src=\"https://cdn.ldpro.top/wukong.jpeg\" width=\"100%\" />\n\n<p>《黑神话：悟空》的开发商为游戏科学公司，《战争艺术：赤潮》就是他们开发的手游，也是他们现在主要的收入来源；一个小规模团队可以做出这样的产品，证明他们是有实力和梦想的，也希望他们可以成为国内单机游戏的先驱者，我对这款游戏表示支持!</p>\n<h3 id=\"宣传视频\"><a href=\"#宣传视频\" class=\"headerlink\" title=\"宣传视频\"></a>宣传视频</h3><p><video controls width=\"100%\" src=\"https://www.heishenhua.com/video/b1/gamesci_wukong.mp4\"></video></p>\n<hr>\n<h3 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h3><p>游戏官网：<a href=\"http://www.heishenhua.com/\">《黑神话：悟空》</a><br>看了宣传视频后，真的好想玩！不知道我的1660s带不带的动😂</p>\n"},{"title":"前端部署个人小记","date":"2020-10-12T01:06:34.000Z","img":"https://cdn.ldpro.top/cover/other2.jpeg","_content":"\n*声明：前端部署网上搜索有不少的文章，但是这里列举的是我自己目前用的一些手段，绝对是亲身实践过的(服务器到期，地址目前不可用)*\n***现在博客和某些项目被我部署到github pages，用travis进行CI/CD，对个人开发者来说更加友好***\n\n### 前言\n这里的部署主要分两块：前端和后端；前端指的是我们打出来的dist包，后端指的是一些后端服务，既然这里说的是前端部署，那必须得是node服务了，这个服务部署好之后我们就可以访问它的api了；这样，一个前后端分离的项目就成功部署好了，这里我依据的是我自己部署好的项目：[网易云音乐](http://175.24.123.231:8081/)，下面我详细说明\n\n### 部署前的准备\n那肯定是需要一台服务器，域名的话，有需求就买一个吧，暂时不需要的话像我一样用ip地址访问其实问题也不大，就是丑一点😂\n我这里用到的服务器是腾讯云购买的centOS云服务器，然后用的是学生体验套餐，10元/月，我续了一年，目前也够用了；\n<img src=\"https://cdn.ldpro.top/p1.png\" width= 360 />\n选择服务器时需要注意：一个是操作系统，一个是选择地区；操作系统建议linux，也就是这里选择unbuntu或者centOS，我用的是centOS，地区的话选择离自己最近的地区，速度相应的也会快些\n<img src=\"https://cdn.ldpro.top/p2.png\" width= 360 />\n买好之后，腾讯云会发送一封站内信，里面有云服务器的登录密码，之后进入云服务器-实例，找到自己刚刚购买的服务器，点击登录\n登录的话分好几种方式，这里我列举我本人觉得最好用的一种：ssh登录\n<img src=\"https://cdn.ldpro.top/p3.png\" width= 360 />\n按图示登录之后，我们就可以通过终端来控制云服务器了，首先我们搭建必要的环境：\n（这里要插一句，如果你不想之后一直用命令行的话，还是装个宝塔面板吧，不然之后上传文件啥的会很烦，这都是本人的血泪史啊～，注意宝塔面板必须在这个阶段装，如果后面安装了nginx啥的就不可以装宝塔面板了）\n那么我们需要安装git+node，linux环境安装git很简单：`yum -y install git`，安装node的话，本人用的是重新设置镜像，但是发现node版本不是最新的，这里建议大家跟着网上教程来吧：<https://www.jianshu.com/p/cb29ceb08a2c>，这两个装好后，基本的环境就搭建好了\n\n### 后端\n对于前端部署而言，后端服务很容易部署，这里需要用到的是pm2以及一个完整的node项目，node项目直接从git拉取，拉下来之后找到对应的启动文件，比如你的启动文件是app.js，正常启动需要运行`node app.js`，理论上来说，当运行了这个脚本后，就已经可以了，但是不久后你会惊奇的发现，10分钟不到，这个服务莫名其妙的关闭了！没错，这个时候，pm2就来了～\npm2是一个node进程管理工具，你可以用它来管理你的node进程，并查看node进程的状态，以及性能监控，负载均衡等。。。\npm2小册子：[pm2简易使用手册](https://juejin.im/post/6844903710037016584)\n接下来，运行这条命令：`pm2 start ./xxx.js`，（xxx.js是你的node启动文件），然后你就可以通过`pm2 list`来查看进程啦～\n服务跑好之后，测试接口是否可以访问：服务器公网ip+node服务的端口号\n\n### 前端\n这里仅记录我自己使用的方式：Linux 系统通过 FTP 上传文件到云服务器；参考文档：<https://cloud.tencent.com/document/product/213/42501>\nftp上传之前，需要确保服务器已经搭建好ftp服务<https://cloud.tencent.com/document/product/213/10912>\n照着上面的文档撸就完事了，文件上传好之后，记录下文件在服务器中的位置，这个之后有用；\n接下来就是配置nginx了，我们通过它的代理功能来让用户可以访问我们的web；\nlinux下安装nginx: <https://www.cnblogs.com/xxoome/p/5866475.html>\nnginx安装好后，修改它的配置文件：nginx.conf，下面是我自己的配置文件：\n*这台服务器我部署了四个项目，8081，8082，8083，和80默认端口*\n``` nginx.conf\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\n# user nginx;\n  user root;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\n# include /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n    server {\n        listen 8081;\n        server_name localhost1;\n        root /etc/nginx/wycloud;\n        charset 'utf-8';\n\n        location / {\n        root /etc/nginx/wycloud;\n        index index.html;\n        try_files $uri $uri/ /index.html;\n}\nlocation ~.*\\.(gif|jpg|jpeg|png|bmp|swf|eot|css|svg|ttf|woff|woff2|properties|json)?$ {\n access_log off;\n            root /etc/nginx/wycloud;\n            expires 30d;\n            break;\n        }\n}\n    server {\n        listen       8082;\n       #listen       [::]:80 default_server;\n        server_name  localhost2;\n        root         /etc/nginx/html;\n        charset 'utf-8';\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\nroot /etc/nginx/html;\nindex index.html;\ntry_files $uri $uri/ /index.html;\n        }\n location ~.*\\.(gif|jpg|jpeg|png|bmp|swf|eot|svg|ttf|woff|woff2|properties|json)?$ {\n access_log off;\n            root /etc/nginx/html;\n            expires 30d;\n            break;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\nserver {\n    listen 80;\n    listen [::]:80;\n    root /usr/share/nginx/blog;\n    server_name lidongss;\n    location / {\n            # First attempt to serve request as file, then\n            # as directory, then fall back to displaying a 404.\n            try_files $uri $uri/ =404;\n    }\n   location /navigator/ {\n        return 302 http://175.24.123.231:8083/;\n        }\n}\nserver {\n        listen 8083;\n        server_name webstack;\n        charset 'utf-8';\n\n        location / {\n        root /etc/nginx/webstack;\n        index index.html;\n        try_files $uri $uri/ /index.html;\n}\n}\n\n\n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#            location = /40x.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#            location = /50x.html {\n#        }\n#    }\n\n}\n\n```\nnginx的相关知识还是要稍微学习一下的，对于我们前端部署项目来说，学会基本的代理方法就可以了\n\n之后每次要更新前端项目的话，`cd /xxx`进入对应的资源文件夹，执行`mdelete *`，删除原来所有的包，然后再执行`lcd /xx`进入你本地的项目文件夹，执行`mput *`批量上传文件\n\n*tip: nginx的坑很多，零基础搞这东西就和盲人摸象一样，差点没把我搞死。。*\n下面列举一些我个人常用的命令：\n+ nginx重启：`nginx -s reload`\n+ 列举当前开放的服务：`netstat -ntlp`\n+ 启动nginx：`nginx -c /etc/nginx/nginx.conf`\n上传资源的时候，如果是文件夹，会提示权限不够：\n+ 开权限：`chown -R ftpuser:ftpuser /var/ftp/test`(后面的路径换为文件夹的地址)","source":"_posts/2020-10-12-前端部署个人小记.md","raw":"---\ntitle: 前端部署个人小记\ndate: 2020-10-12 09:06:34\ncategories: [技术]\nimg: https://cdn.ldpro.top/cover/other2.jpeg\ntags:\n- 前端部署\n- 部署\n---\n\n*声明：前端部署网上搜索有不少的文章，但是这里列举的是我自己目前用的一些手段，绝对是亲身实践过的(服务器到期，地址目前不可用)*\n***现在博客和某些项目被我部署到github pages，用travis进行CI/CD，对个人开发者来说更加友好***\n\n### 前言\n这里的部署主要分两块：前端和后端；前端指的是我们打出来的dist包，后端指的是一些后端服务，既然这里说的是前端部署，那必须得是node服务了，这个服务部署好之后我们就可以访问它的api了；这样，一个前后端分离的项目就成功部署好了，这里我依据的是我自己部署好的项目：[网易云音乐](http://175.24.123.231:8081/)，下面我详细说明\n\n### 部署前的准备\n那肯定是需要一台服务器，域名的话，有需求就买一个吧，暂时不需要的话像我一样用ip地址访问其实问题也不大，就是丑一点😂\n我这里用到的服务器是腾讯云购买的centOS云服务器，然后用的是学生体验套餐，10元/月，我续了一年，目前也够用了；\n<img src=\"https://cdn.ldpro.top/p1.png\" width= 360 />\n选择服务器时需要注意：一个是操作系统，一个是选择地区；操作系统建议linux，也就是这里选择unbuntu或者centOS，我用的是centOS，地区的话选择离自己最近的地区，速度相应的也会快些\n<img src=\"https://cdn.ldpro.top/p2.png\" width= 360 />\n买好之后，腾讯云会发送一封站内信，里面有云服务器的登录密码，之后进入云服务器-实例，找到自己刚刚购买的服务器，点击登录\n登录的话分好几种方式，这里我列举我本人觉得最好用的一种：ssh登录\n<img src=\"https://cdn.ldpro.top/p3.png\" width= 360 />\n按图示登录之后，我们就可以通过终端来控制云服务器了，首先我们搭建必要的环境：\n（这里要插一句，如果你不想之后一直用命令行的话，还是装个宝塔面板吧，不然之后上传文件啥的会很烦，这都是本人的血泪史啊～，注意宝塔面板必须在这个阶段装，如果后面安装了nginx啥的就不可以装宝塔面板了）\n那么我们需要安装git+node，linux环境安装git很简单：`yum -y install git`，安装node的话，本人用的是重新设置镜像，但是发现node版本不是最新的，这里建议大家跟着网上教程来吧：<https://www.jianshu.com/p/cb29ceb08a2c>，这两个装好后，基本的环境就搭建好了\n\n### 后端\n对于前端部署而言，后端服务很容易部署，这里需要用到的是pm2以及一个完整的node项目，node项目直接从git拉取，拉下来之后找到对应的启动文件，比如你的启动文件是app.js，正常启动需要运行`node app.js`，理论上来说，当运行了这个脚本后，就已经可以了，但是不久后你会惊奇的发现，10分钟不到，这个服务莫名其妙的关闭了！没错，这个时候，pm2就来了～\npm2是一个node进程管理工具，你可以用它来管理你的node进程，并查看node进程的状态，以及性能监控，负载均衡等。。。\npm2小册子：[pm2简易使用手册](https://juejin.im/post/6844903710037016584)\n接下来，运行这条命令：`pm2 start ./xxx.js`，（xxx.js是你的node启动文件），然后你就可以通过`pm2 list`来查看进程啦～\n服务跑好之后，测试接口是否可以访问：服务器公网ip+node服务的端口号\n\n### 前端\n这里仅记录我自己使用的方式：Linux 系统通过 FTP 上传文件到云服务器；参考文档：<https://cloud.tencent.com/document/product/213/42501>\nftp上传之前，需要确保服务器已经搭建好ftp服务<https://cloud.tencent.com/document/product/213/10912>\n照着上面的文档撸就完事了，文件上传好之后，记录下文件在服务器中的位置，这个之后有用；\n接下来就是配置nginx了，我们通过它的代理功能来让用户可以访问我们的web；\nlinux下安装nginx: <https://www.cnblogs.com/xxoome/p/5866475.html>\nnginx安装好后，修改它的配置文件：nginx.conf，下面是我自己的配置文件：\n*这台服务器我部署了四个项目，8081，8082，8083，和80默认端口*\n``` nginx.conf\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\n# user nginx;\n  user root;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\n# include /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n    server {\n        listen 8081;\n        server_name localhost1;\n        root /etc/nginx/wycloud;\n        charset 'utf-8';\n\n        location / {\n        root /etc/nginx/wycloud;\n        index index.html;\n        try_files $uri $uri/ /index.html;\n}\nlocation ~.*\\.(gif|jpg|jpeg|png|bmp|swf|eot|css|svg|ttf|woff|woff2|properties|json)?$ {\n access_log off;\n            root /etc/nginx/wycloud;\n            expires 30d;\n            break;\n        }\n}\n    server {\n        listen       8082;\n       #listen       [::]:80 default_server;\n        server_name  localhost2;\n        root         /etc/nginx/html;\n        charset 'utf-8';\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\nroot /etc/nginx/html;\nindex index.html;\ntry_files $uri $uri/ /index.html;\n        }\n location ~.*\\.(gif|jpg|jpeg|png|bmp|swf|eot|svg|ttf|woff|woff2|properties|json)?$ {\n access_log off;\n            root /etc/nginx/html;\n            expires 30d;\n            break;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\nserver {\n    listen 80;\n    listen [::]:80;\n    root /usr/share/nginx/blog;\n    server_name lidongss;\n    location / {\n            # First attempt to serve request as file, then\n            # as directory, then fall back to displaying a 404.\n            try_files $uri $uri/ =404;\n    }\n   location /navigator/ {\n        return 302 http://175.24.123.231:8083/;\n        }\n}\nserver {\n        listen 8083;\n        server_name webstack;\n        charset 'utf-8';\n\n        location / {\n        root /etc/nginx/webstack;\n        index index.html;\n        try_files $uri $uri/ /index.html;\n}\n}\n\n\n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#            location = /40x.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#            location = /50x.html {\n#        }\n#    }\n\n}\n\n```\nnginx的相关知识还是要稍微学习一下的，对于我们前端部署项目来说，学会基本的代理方法就可以了\n\n之后每次要更新前端项目的话，`cd /xxx`进入对应的资源文件夹，执行`mdelete *`，删除原来所有的包，然后再执行`lcd /xx`进入你本地的项目文件夹，执行`mput *`批量上传文件\n\n*tip: nginx的坑很多，零基础搞这东西就和盲人摸象一样，差点没把我搞死。。*\n下面列举一些我个人常用的命令：\n+ nginx重启：`nginx -s reload`\n+ 列举当前开放的服务：`netstat -ntlp`\n+ 启动nginx：`nginx -c /etc/nginx/nginx.conf`\n上传资源的时候，如果是文件夹，会提示权限不够：\n+ 开权限：`chown -R ftpuser:ftpuser /var/ftp/test`(后面的路径换为文件夹的地址)","slug":"前端部署个人小记","published":1,"updated":"2022-04-29T11:12:54.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgj0009uwx27dfh321h","content":"<p><em>声明：前端部署网上搜索有不少的文章，但是这里列举的是我自己目前用的一些手段，绝对是亲身实践过的(服务器到期，地址目前不可用)</em><br><strong><em>现在博客和某些项目被我部署到github pages，用travis进行CI/CD，对个人开发者来说更加友好</em></strong></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这里的部署主要分两块：前端和后端；前端指的是我们打出来的dist包，后端指的是一些后端服务，既然这里说的是前端部署，那必须得是node服务了，这个服务部署好之后我们就可以访问它的api了；这样，一个前后端分离的项目就成功部署好了，这里我依据的是我自己部署好的项目：<a href=\"http://175.24.123.231:8081/\">网易云音乐</a>，下面我详细说明</p>\n<h3 id=\"部署前的准备\"><a href=\"#部署前的准备\" class=\"headerlink\" title=\"部署前的准备\"></a>部署前的准备</h3><p>那肯定是需要一台服务器，域名的话，有需求就买一个吧，暂时不需要的话像我一样用ip地址访问其实问题也不大，就是丑一点😂<br>我这里用到的服务器是腾讯云购买的centOS云服务器，然后用的是学生体验套餐，10元/月，我续了一年，目前也够用了；<br><img src=\"https://cdn.ldpro.top/p1.png\" width= 360 /><br>选择服务器时需要注意：一个是操作系统，一个是选择地区；操作系统建议linux，也就是这里选择unbuntu或者centOS，我用的是centOS，地区的话选择离自己最近的地区，速度相应的也会快些<br><img src=\"https://cdn.ldpro.top/p2.png\" width= 360 /><br>买好之后，腾讯云会发送一封站内信，里面有云服务器的登录密码，之后进入云服务器-实例，找到自己刚刚购买的服务器，点击登录<br>登录的话分好几种方式，这里我列举我本人觉得最好用的一种：ssh登录<br><img src=\"https://cdn.ldpro.top/p3.png\" width= 360 /><br>按图示登录之后，我们就可以通过终端来控制云服务器了，首先我们搭建必要的环境：<br>（这里要插一句，如果你不想之后一直用命令行的话，还是装个宝塔面板吧，不然之后上传文件啥的会很烦，这都是本人的血泪史啊～，注意宝塔面板必须在这个阶段装，如果后面安装了nginx啥的就不可以装宝塔面板了）<br>那么我们需要安装git+node，linux环境安装git很简单：<code>yum -y install git</code>，安装node的话，本人用的是重新设置镜像，但是发现node版本不是最新的，这里建议大家跟着网上教程来吧：<a href=\"https://www.jianshu.com/p/cb29ceb08a2c\">https://www.jianshu.com/p/cb29ceb08a2c</a>，这两个装好后，基本的环境就搭建好了</p>\n<h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><p>对于前端部署而言，后端服务很容易部署，这里需要用到的是pm2以及一个完整的node项目，node项目直接从git拉取，拉下来之后找到对应的启动文件，比如你的启动文件是app.js，正常启动需要运行<code>node app.js</code>，理论上来说，当运行了这个脚本后，就已经可以了，但是不久后你会惊奇的发现，10分钟不到，这个服务莫名其妙的关闭了！没错，这个时候，pm2就来了～<br>pm2是一个node进程管理工具，你可以用它来管理你的node进程，并查看node进程的状态，以及性能监控，负载均衡等。。。<br>pm2小册子：<a href=\"https://juejin.im/post/6844903710037016584\">pm2简易使用手册</a><br>接下来，运行这条命令：<code>pm2 start ./xxx.js</code>，（xxx.js是你的node启动文件），然后你就可以通过<code>pm2 list</code>来查看进程啦～<br>服务跑好之后，测试接口是否可以访问：服务器公网ip+node服务的端口号</p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><p>这里仅记录我自己使用的方式：Linux 系统通过 FTP 上传文件到云服务器；参考文档：<a href=\"https://cloud.tencent.com/document/product/213/42501\">https://cloud.tencent.com/document/product/213/42501</a><br>ftp上传之前，需要确保服务器已经搭建好ftp服务<a href=\"https://cloud.tencent.com/document/product/213/10912\">https://cloud.tencent.com/document/product/213/10912</a><br>照着上面的文档撸就完事了，文件上传好之后，记录下文件在服务器中的位置，这个之后有用；<br>接下来就是配置nginx了，我们通过它的代理功能来让用户可以访问我们的web；<br>linux下安装nginx: <a href=\"https://www.cnblogs.com/xxoome/p/5866475.html\">https://www.cnblogs.com/xxoome/p/5866475.html</a><br>nginx安装好后，修改它的配置文件：nginx.conf，下面是我自己的配置文件：<br><em>这台服务器我部署了四个项目，8081，8082，8083，和80默认端口</em></p>\n<pre class=\"line-numbers language-nginx.conf\" data-language=\"nginx.conf\"><code class=\"language-nginx.conf\"># For more information on configuration, see:\n#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;\n#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;\n\n# user nginx;\n  user root;\nworker_processes auto;\nerror_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\npid &#x2F;run&#x2F;nginx.pid;\n\n# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.\n# include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n\nevents &#123;\n    worker_connections 1024;\n&#125;\n\nhttp &#123;\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n    default_type        application&#x2F;octet-stream;\n\n    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.\n    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include\n    # for more information.\n    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n    server &#123;\n        listen 8081;\n        server_name localhost1;\n        root &#x2F;etc&#x2F;nginx&#x2F;wycloud;\n        charset &#39;utf-8&#39;;\n\n        location &#x2F; &#123;\n        root &#x2F;etc&#x2F;nginx&#x2F;wycloud;\n        index index.html;\n        try_files $uri $uri&#x2F; &#x2F;index.html;\n&#125;\nlocation ~.*\\.(gif|jpg|jpeg|png|bmp|swf|eot|css|svg|ttf|woff|woff2|properties|json)?$ &#123;\n access_log off;\n            root &#x2F;etc&#x2F;nginx&#x2F;wycloud;\n            expires 30d;\n            break;\n        &#125;\n&#125;\n    server &#123;\n        listen       8082;\n       #listen       [::]:80 default_server;\n        server_name  localhost2;\n        root         &#x2F;etc&#x2F;nginx&#x2F;html;\n        charset &#39;utf-8&#39;;\n        # Load configuration files for the default server block.\n        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n\n        location &#x2F; &#123;\nroot &#x2F;etc&#x2F;nginx&#x2F;html;\nindex index.html;\ntry_files $uri $uri&#x2F; &#x2F;index.html;\n        &#125;\n location ~.*\\.(gif|jpg|jpeg|png|bmp|swf|eot|svg|ttf|woff|woff2|properties|json)?$ &#123;\n access_log off;\n            root &#x2F;etc&#x2F;nginx&#x2F;html;\n            expires 30d;\n            break;\n        &#125;\n\n        error_page 404 &#x2F;404.html;\n            location &#x3D; &#x2F;40x.html &#123;\n        &#125;\n\n        error_page 500 502 503 504 &#x2F;50x.html;\n            location &#x3D; &#x2F;50x.html &#123;\n        &#125;\n    &#125;\nserver &#123;\n    listen 80;\n    listen [::]:80;\n    root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;blog;\n    server_name lidongss;\n    location &#x2F; &#123;\n            # First attempt to serve request as file, then\n            # as directory, then fall back to displaying a 404.\n            try_files $uri $uri&#x2F; &#x3D;404;\n    &#125;\n   location &#x2F;navigator&#x2F; &#123;\n        return 302 http:&#x2F;&#x2F;175.24.123.231:8083&#x2F;;\n        &#125;\n&#125;\nserver &#123;\n        listen 8083;\n        server_name webstack;\n        charset &#39;utf-8&#39;;\n\n        location &#x2F; &#123;\n        root &#x2F;etc&#x2F;nginx&#x2F;webstack;\n        index index.html;\n        try_files $uri $uri&#x2F; &#x2F;index.html;\n&#125;\n&#125;\n\n\n# Settings for a TLS enabled server.\n#\n#    server &#123;\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n#\n#        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;\n#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n#\n#        location &#x2F; &#123;\n#        &#125;\n#\n#        error_page 404 &#x2F;404.html;\n#            location &#x3D; &#x2F;40x.html &#123;\n#        &#125;\n#\n#        error_page 500 502 503 504 &#x2F;50x.html;\n#            location &#x3D; &#x2F;50x.html &#123;\n#        &#125;\n#    &#125;\n\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>nginx的相关知识还是要稍微学习一下的，对于我们前端部署项目来说，学会基本的代理方法就可以了</p>\n<p>之后每次要更新前端项目的话，<code>cd /xxx</code>进入对应的资源文件夹，执行<code>mdelete *</code>，删除原来所有的包，然后再执行<code>lcd /xx</code>进入你本地的项目文件夹，执行<code>mput *</code>批量上传文件</p>\n<p><em>tip: nginx的坑很多，零基础搞这东西就和盲人摸象一样，差点没把我搞死。。</em><br>下面列举一些我个人常用的命令：</p>\n<ul>\n<li>nginx重启：<code>nginx -s reload</code></li>\n<li>列举当前开放的服务：<code>netstat -ntlp</code></li>\n<li>启动nginx：<code>nginx -c /etc/nginx/nginx.conf</code><br>上传资源的时候，如果是文件夹，会提示权限不够：</li>\n<li>开权限：<code>chown -R ftpuser:ftpuser /var/ftp/test</code>(后面的路径换为文件夹的地址)</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<p><em>声明：前端部署网上搜索有不少的文章，但是这里列举的是我自己目前用的一些手段，绝对是亲身实践过的(服务器到期，地址目前不可用)</em><br><strong><em>现在博客和某些项目被我部署到github pages，用travis进行CI/CD，对个人开发者来说更加友好</em></strong></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这里的部署主要分两块：前端和后端；前端指的是我们打出来的dist包，后端指的是一些后端服务，既然这里说的是前端部署，那必须得是node服务了，这个服务部署好之后我们就可以访问它的api了；这样，一个前后端分离的项目就成功部署好了，这里我依据的是我自己部署好的项目：<a href=\"http://175.24.123.231:8081/\">网易云音乐</a>，下面我详细说明</p>\n<h3 id=\"部署前的准备\"><a href=\"#部署前的准备\" class=\"headerlink\" title=\"部署前的准备\"></a>部署前的准备</h3><p>那肯定是需要一台服务器，域名的话，有需求就买一个吧，暂时不需要的话像我一样用ip地址访问其实问题也不大，就是丑一点😂<br>我这里用到的服务器是腾讯云购买的centOS云服务器，然后用的是学生体验套餐，10元/月，我续了一年，目前也够用了；<br><img src=\"https://cdn.ldpro.top/p1.png\" width= 360 /><br>选择服务器时需要注意：一个是操作系统，一个是选择地区；操作系统建议linux，也就是这里选择unbuntu或者centOS，我用的是centOS，地区的话选择离自己最近的地区，速度相应的也会快些<br><img src=\"https://cdn.ldpro.top/p2.png\" width= 360 /><br>买好之后，腾讯云会发送一封站内信，里面有云服务器的登录密码，之后进入云服务器-实例，找到自己刚刚购买的服务器，点击登录<br>登录的话分好几种方式，这里我列举我本人觉得最好用的一种：ssh登录<br><img src=\"https://cdn.ldpro.top/p3.png\" width= 360 /><br>按图示登录之后，我们就可以通过终端来控制云服务器了，首先我们搭建必要的环境：<br>（这里要插一句，如果你不想之后一直用命令行的话，还是装个宝塔面板吧，不然之后上传文件啥的会很烦，这都是本人的血泪史啊～，注意宝塔面板必须在这个阶段装，如果后面安装了nginx啥的就不可以装宝塔面板了）<br>那么我们需要安装git+node，linux环境安装git很简单：<code>yum -y install git</code>，安装node的话，本人用的是重新设置镜像，但是发现node版本不是最新的，这里建议大家跟着网上教程来吧：<a href=\"https://www.jianshu.com/p/cb29ceb08a2c\">https://www.jianshu.com/p/cb29ceb08a2c</a>，这两个装好后，基本的环境就搭建好了</p>\n<h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><p>对于前端部署而言，后端服务很容易部署，这里需要用到的是pm2以及一个完整的node项目，node项目直接从git拉取，拉下来之后找到对应的启动文件，比如你的启动文件是app.js，正常启动需要运行<code>node app.js</code>，理论上来说，当运行了这个脚本后，就已经可以了，但是不久后你会惊奇的发现，10分钟不到，这个服务莫名其妙的关闭了！没错，这个时候，pm2就来了～<br>pm2是一个node进程管理工具，你可以用它来管理你的node进程，并查看node进程的状态，以及性能监控，负载均衡等。。。<br>pm2小册子：<a href=\"https://juejin.im/post/6844903710037016584\">pm2简易使用手册</a><br>接下来，运行这条命令：<code>pm2 start ./xxx.js</code>，（xxx.js是你的node启动文件），然后你就可以通过<code>pm2 list</code>来查看进程啦～<br>服务跑好之后，测试接口是否可以访问：服务器公网ip+node服务的端口号</p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><p>这里仅记录我自己使用的方式：Linux 系统通过 FTP 上传文件到云服务器；参考文档：<a href=\"https://cloud.tencent.com/document/product/213/42501\">https://cloud.tencent.com/document/product/213/42501</a><br>ftp上传之前，需要确保服务器已经搭建好ftp服务<a href=\"https://cloud.tencent.com/document/product/213/10912\">https://cloud.tencent.com/document/product/213/10912</a><br>照着上面的文档撸就完事了，文件上传好之后，记录下文件在服务器中的位置，这个之后有用；<br>接下来就是配置nginx了，我们通过它的代理功能来让用户可以访问我们的web；<br>linux下安装nginx: <a href=\"https://www.cnblogs.com/xxoome/p/5866475.html\">https://www.cnblogs.com/xxoome/p/5866475.html</a><br>nginx安装好后，修改它的配置文件：nginx.conf，下面是我自己的配置文件：<br><em>这台服务器我部署了四个项目，8081，8082，8083，和80默认端口</em></p>\n<pre class=\"line-numbers language-nginx.conf\" data-language=\"nginx.conf\"><code class=\"language-nginx.conf\"># For more information on configuration, see:\n#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;\n#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;\n\n# user nginx;\n  user root;\nworker_processes auto;\nerror_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\npid &#x2F;run&#x2F;nginx.pid;\n\n# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.\n# include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n\nevents &#123;\n    worker_connections 1024;\n&#125;\n\nhttp &#123;\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n    default_type        application&#x2F;octet-stream;\n\n    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.\n    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include\n    # for more information.\n    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n    server &#123;\n        listen 8081;\n        server_name localhost1;\n        root &#x2F;etc&#x2F;nginx&#x2F;wycloud;\n        charset &#39;utf-8&#39;;\n\n        location &#x2F; &#123;\n        root &#x2F;etc&#x2F;nginx&#x2F;wycloud;\n        index index.html;\n        try_files $uri $uri&#x2F; &#x2F;index.html;\n&#125;\nlocation ~.*\\.(gif|jpg|jpeg|png|bmp|swf|eot|css|svg|ttf|woff|woff2|properties|json)?$ &#123;\n access_log off;\n            root &#x2F;etc&#x2F;nginx&#x2F;wycloud;\n            expires 30d;\n            break;\n        &#125;\n&#125;\n    server &#123;\n        listen       8082;\n       #listen       [::]:80 default_server;\n        server_name  localhost2;\n        root         &#x2F;etc&#x2F;nginx&#x2F;html;\n        charset &#39;utf-8&#39;;\n        # Load configuration files for the default server block.\n        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n\n        location &#x2F; &#123;\nroot &#x2F;etc&#x2F;nginx&#x2F;html;\nindex index.html;\ntry_files $uri $uri&#x2F; &#x2F;index.html;\n        &#125;\n location ~.*\\.(gif|jpg|jpeg|png|bmp|swf|eot|svg|ttf|woff|woff2|properties|json)?$ &#123;\n access_log off;\n            root &#x2F;etc&#x2F;nginx&#x2F;html;\n            expires 30d;\n            break;\n        &#125;\n\n        error_page 404 &#x2F;404.html;\n            location &#x3D; &#x2F;40x.html &#123;\n        &#125;\n\n        error_page 500 502 503 504 &#x2F;50x.html;\n            location &#x3D; &#x2F;50x.html &#123;\n        &#125;\n    &#125;\nserver &#123;\n    listen 80;\n    listen [::]:80;\n    root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;blog;\n    server_name lidongss;\n    location &#x2F; &#123;\n            # First attempt to serve request as file, then\n            # as directory, then fall back to displaying a 404.\n            try_files $uri $uri&#x2F; &#x3D;404;\n    &#125;\n   location &#x2F;navigator&#x2F; &#123;\n        return 302 http:&#x2F;&#x2F;175.24.123.231:8083&#x2F;;\n        &#125;\n&#125;\nserver &#123;\n        listen 8083;\n        server_name webstack;\n        charset &#39;utf-8&#39;;\n\n        location &#x2F; &#123;\n        root &#x2F;etc&#x2F;nginx&#x2F;webstack;\n        index index.html;\n        try_files $uri $uri&#x2F; &#x2F;index.html;\n&#125;\n&#125;\n\n\n# Settings for a TLS enabled server.\n#\n#    server &#123;\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n#\n#        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;\n#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n#\n#        location &#x2F; &#123;\n#        &#125;\n#\n#        error_page 404 &#x2F;404.html;\n#            location &#x3D; &#x2F;40x.html &#123;\n#        &#125;\n#\n#        error_page 500 502 503 504 &#x2F;50x.html;\n#            location &#x3D; &#x2F;50x.html &#123;\n#        &#125;\n#    &#125;\n\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>nginx的相关知识还是要稍微学习一下的，对于我们前端部署项目来说，学会基本的代理方法就可以了</p>\n<p>之后每次要更新前端项目的话，<code>cd /xxx</code>进入对应的资源文件夹，执行<code>mdelete *</code>，删除原来所有的包，然后再执行<code>lcd /xx</code>进入你本地的项目文件夹，执行<code>mput *</code>批量上传文件</p>\n<p><em>tip: nginx的坑很多，零基础搞这东西就和盲人摸象一样，差点没把我搞死。。</em><br>下面列举一些我个人常用的命令：</p>\n<ul>\n<li>nginx重启：<code>nginx -s reload</code></li>\n<li>列举当前开放的服务：<code>netstat -ntlp</code></li>\n<li>启动nginx：<code>nginx -c /etc/nginx/nginx.conf</code><br>上传资源的时候，如果是文件夹，会提示权限不够：</li>\n<li>开权限：<code>chown -R ftpuser:ftpuser /var/ftp/test</code>(后面的路径换为文件夹的地址)</li>\n</ul>\n"},{"title":"ES6 Set Map","date":"2020-10-21T06:43:42.000Z","img":"https://cdn.ldpro.top/cover/c2.jpg","_content":"\nMap,Set是ES6新增的两种数据结构，由于它们的特性，在开发中可以帮我们处理一些特殊情况，带来效率的提升\n\n### Set\nSet最大的特性是它的元素唯一性，它本身可以存储任何类型的值。\n```js\n//set常用api\n  let set = new Set();\n  set.add(1)\n  set.add(2)\n  set.add('str')\n  set.add([1,2,3])\n  set.add({x:1,y:2})\n  set.add((e)=>{console.log(e)})\n  set.delete(2)\n  console.log(set,set.size,set.has(1),set.values(),set.keys())\n```\n\n<img src=\"https://cdn.ldpro.top/set_demo1.png\" width=\"700\">\n\n唯一性的体现：\n```js\n  let set = new Set();\n  set.add(1)\n  set.add(2)\n  set.add('str')\n  set.add([1,2,3])\n  set.add({x:1,y:2})\n  set.add((e)=>{console.log(e)})\n  set.delete(2)\n  set.add(1)\n  set.add({x:1,y:2})\n  console.log(set,set.size,set.has(1),set.values(),set.keys())\n```\n\n<img src=\"https://cdn.ldpro.top/set_demo2.png\" width=\"450\">\n很明显，1被成功过滤，但是对象没有被过滤，因为数字是基本类型，对象是引用类型，所以这两个对象本质上是不相等的，这两个概念，不懂的可以百度补一下\n\n然后set有一个很常用的功能就是和数组之间的类型转换\n```js\n  let set = new Set(['v1','v2','v3']);\n  let setArr = [...set]\n  console.log(set,setArr)\n```\n\n<img src=\"https://cdn.ldpro.top/set_demo3.png\" width=\"600\">\n\n其实看控制台打印发现，Set类似于一个对象，它本身也是一个引用类型\n\n### Map\nMap是用来保存键值对的，从这一点来看，妥妥的对象特性，但Map和Object不相同的一点是，它的键值可以存储任何值\nMap和Object的区别：\n1. Object的键只能是字符串或者Symbols，但Map的键可以是任意值\n2. Object键值无序，Map键值有序\n3. Object键值对个数无法查看，Map可查看\n4. Object有原型链，原型的键名可能会与对象上的键名冲突\n\nexample:\n```js\nlet map = new Map();\n  map.set('str-key','str-key对应的value')\n  map.set({x:1},'obj对应的value')\n  map.set((e)=>{console.log(e)},'func对应的value')\n  map.set(NaN,'NaN对应的value')\n  map.set(null,'null对应的value')\n  console.log(map.size,map.keys(),map.values(),map.entries())\n```\n<img src=\"https://cdn.ldpro.top/map_demo1.png\" width=\"600\">\n\n也可以用forEach循环键值对：\n```js\nmap.forEach((value,key) => {\n    console.log(value + ' = ' + key)\n})\n```\n或者用for...of循环\n```js\nfor(let [key,value] of map) {\n    console.log(key + ' = ' + value)\n}\n```\n<img src=\"https://cdn.ldpro.top/map_demo2.png\" width=\"500\">\n\n*但是for...in循环没得用，这一点上，看得出来Map不是纯对象，至少不是可枚举属，还是有差异的*\n\nMap对象也是可以和数组之间进行类型转换,但是只能用二维数组\n```js\nlet map = new Map([['key1','value1'],['key2','value2']]);\n  let mapArr = Array.from(map)\n  for(let [key,value] of map) {\n    console.log(key + ' = ' + value)\n  }\n  console.log(mapArr)\n```\n<img src=\"https://cdn.ldpro.top/map_demo3.png\" width=\"500\">\n","source":"_posts/2020-10-21-ES6-Set-Map.md","raw":"---\ntitle: ES6 Set Map\ndate: 2020-10-21 14:43:42\ncategories: [技术]\nimg: https://cdn.ldpro.top/cover/c2.jpg\ntags:\n- ES6\n- Set/Map\n---\n\nMap,Set是ES6新增的两种数据结构，由于它们的特性，在开发中可以帮我们处理一些特殊情况，带来效率的提升\n\n### Set\nSet最大的特性是它的元素唯一性，它本身可以存储任何类型的值。\n```js\n//set常用api\n  let set = new Set();\n  set.add(1)\n  set.add(2)\n  set.add('str')\n  set.add([1,2,3])\n  set.add({x:1,y:2})\n  set.add((e)=>{console.log(e)})\n  set.delete(2)\n  console.log(set,set.size,set.has(1),set.values(),set.keys())\n```\n\n<img src=\"https://cdn.ldpro.top/set_demo1.png\" width=\"700\">\n\n唯一性的体现：\n```js\n  let set = new Set();\n  set.add(1)\n  set.add(2)\n  set.add('str')\n  set.add([1,2,3])\n  set.add({x:1,y:2})\n  set.add((e)=>{console.log(e)})\n  set.delete(2)\n  set.add(1)\n  set.add({x:1,y:2})\n  console.log(set,set.size,set.has(1),set.values(),set.keys())\n```\n\n<img src=\"https://cdn.ldpro.top/set_demo2.png\" width=\"450\">\n很明显，1被成功过滤，但是对象没有被过滤，因为数字是基本类型，对象是引用类型，所以这两个对象本质上是不相等的，这两个概念，不懂的可以百度补一下\n\n然后set有一个很常用的功能就是和数组之间的类型转换\n```js\n  let set = new Set(['v1','v2','v3']);\n  let setArr = [...set]\n  console.log(set,setArr)\n```\n\n<img src=\"https://cdn.ldpro.top/set_demo3.png\" width=\"600\">\n\n其实看控制台打印发现，Set类似于一个对象，它本身也是一个引用类型\n\n### Map\nMap是用来保存键值对的，从这一点来看，妥妥的对象特性，但Map和Object不相同的一点是，它的键值可以存储任何值\nMap和Object的区别：\n1. Object的键只能是字符串或者Symbols，但Map的键可以是任意值\n2. Object键值无序，Map键值有序\n3. Object键值对个数无法查看，Map可查看\n4. Object有原型链，原型的键名可能会与对象上的键名冲突\n\nexample:\n```js\nlet map = new Map();\n  map.set('str-key','str-key对应的value')\n  map.set({x:1},'obj对应的value')\n  map.set((e)=>{console.log(e)},'func对应的value')\n  map.set(NaN,'NaN对应的value')\n  map.set(null,'null对应的value')\n  console.log(map.size,map.keys(),map.values(),map.entries())\n```\n<img src=\"https://cdn.ldpro.top/map_demo1.png\" width=\"600\">\n\n也可以用forEach循环键值对：\n```js\nmap.forEach((value,key) => {\n    console.log(value + ' = ' + key)\n})\n```\n或者用for...of循环\n```js\nfor(let [key,value] of map) {\n    console.log(key + ' = ' + value)\n}\n```\n<img src=\"https://cdn.ldpro.top/map_demo2.png\" width=\"500\">\n\n*但是for...in循环没得用，这一点上，看得出来Map不是纯对象，至少不是可枚举属，还是有差异的*\n\nMap对象也是可以和数组之间进行类型转换,但是只能用二维数组\n```js\nlet map = new Map([['key1','value1'],['key2','value2']]);\n  let mapArr = Array.from(map)\n  for(let [key,value] of map) {\n    console.log(key + ' = ' + value)\n  }\n  console.log(mapArr)\n```\n<img src=\"https://cdn.ldpro.top/map_demo3.png\" width=\"500\">\n","slug":"ES6-Set-Map","published":1,"updated":"2022-04-29T11:09:17.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgk000buwx2akvl49fi","content":"<p>Map,Set是ES6新增的两种数据结构，由于它们的特性，在开发中可以帮我们处理一些特殊情况，带来效率的提升</p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Set最大的特性是它的元素唯一性，它本身可以存储任何类型的值。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//set常用api</span>\n  <span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://cdn.ldpro.top/set_demo1.png\" width=\"700\">\n\n<p>唯一性的体现：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://cdn.ldpro.top/set_demo2.png\" width=\"450\">\n很明显，1被成功过滤，但是对象没有被过滤，因为数字是基本类型，对象是引用类型，所以这两个对象本质上是不相等的，这两个概念，不懂的可以百度补一下\n\n<p>然后set有一个很常用的功能就是和数组之间的类型转换</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'v1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'v2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'v3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> setArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>set<span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">,</span>setArr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://cdn.ldpro.top/set_demo3.png\" width=\"600\">\n\n<p>其实看控制台打印发现，Set类似于一个对象，它本身也是一个引用类型</p>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>Map是用来保存键值对的，从这一点来看，妥妥的对象特性，但Map和Object不相同的一点是，它的键值可以存储任何值<br>Map和Object的区别：</p>\n<ol>\n<li>Object的键只能是字符串或者Symbols，但Map的键可以是任意值</li>\n<li>Object键值无序，Map键值有序</li>\n<li>Object键值对个数无法查看，Map可查看</li>\n<li>Object有原型链，原型的键名可能会与对象上的键名冲突</li>\n</ol>\n<p>example:</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str-key'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'str-key对应的value'</span><span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">'obj对应的value'</span><span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">'func对应的value'</span><span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span><span class=\"token string\">'NaN对应的value'</span><span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">'null对应的value'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<img src=\"https://cdn.ldpro.top/map_demo1.png\" width=\"600\">\n\n<p>也可以用forEach循环键值对：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>或者用for…of循环</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<img src=\"https://cdn.ldpro.top/map_demo2.png\" width=\"500\">\n\n<p><em>但是for…in循环没得用，这一点上，看得出来Map不是纯对象，至少不是可枚举属，还是有差异的</em></p>\n<p>Map对象也是可以和数组之间进行类型转换,但是只能用二维数组</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> mapArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mapArr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<img src=\"https://cdn.ldpro.top/map_demo3.png\" width=\"500\">\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<p>Map,Set是ES6新增的两种数据结构，由于它们的特性，在开发中可以帮我们处理一些特殊情况，带来效率的提升</p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Set最大的特性是它的元素唯一性，它本身可以存储任何类型的值。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//set常用api</span>\n  <span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  set<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://cdn.ldpro.top/set_demo1.png\" width=\"700\">\n\n<p>唯一性的体现：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://cdn.ldpro.top/set_demo2.png\" width=\"450\">\n很明显，1被成功过滤，但是对象没有被过滤，因为数字是基本类型，对象是引用类型，所以这两个对象本质上是不相等的，这两个概念，不懂的可以百度补一下\n\n<p>然后set有一个很常用的功能就是和数组之间的类型转换</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'v1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'v2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'v3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> setArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>set<span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">,</span>setArr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://cdn.ldpro.top/set_demo3.png\" width=\"600\">\n\n<p>其实看控制台打印发现，Set类似于一个对象，它本身也是一个引用类型</p>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>Map是用来保存键值对的，从这一点来看，妥妥的对象特性，但Map和Object不相同的一点是，它的键值可以存储任何值<br>Map和Object的区别：</p>\n<ol>\n<li>Object的键只能是字符串或者Symbols，但Map的键可以是任意值</li>\n<li>Object键值无序，Map键值有序</li>\n<li>Object键值对个数无法查看，Map可查看</li>\n<li>Object有原型链，原型的键名可能会与对象上的键名冲突</li>\n</ol>\n<p>example:</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str-key'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'str-key对应的value'</span><span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">'obj对应的value'</span><span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">'func对应的value'</span><span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span><span class=\"token string\">'NaN对应的value'</span><span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">'null对应的value'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<img src=\"https://cdn.ldpro.top/map_demo1.png\" width=\"600\">\n\n<p>也可以用forEach循环键值对：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>或者用for…of循环</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<img src=\"https://cdn.ldpro.top/map_demo2.png\" width=\"500\">\n\n<p><em>但是for…in循环没得用，这一点上，看得出来Map不是纯对象，至少不是可枚举属，还是有差异的</em></p>\n<p>Map对象也是可以和数组之间进行类型转换,但是只能用二维数组</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> mapArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mapArr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<img src=\"https://cdn.ldpro.top/map_demo3.png\" width=\"500\">\n"},{"title":"前端常用单位介绍","date":"2020-11-20T07:58:43.000Z","keywords":["前端常用单位","单位"],"img":"https://cdn.ldpro.top/cover/c3.jpg","_content":"\n本文记录一下前端的常用单位，分别为：px、em、rem、vw(vh)\n\n### px\npx是大家最耳熟能详的，也叫像素，很多人可能以为它是一个绝对单位，实际上它是一个相对单位，相对于屏幕分辨率而言\n简单来说，分辨率和屏幕尺寸没有什么关系，作为一个前端来说，需要将注意力更多放在分辨率上，因为1px在分辨率不同的电脑上，显示的大小是不同的；\n常用分辨率：\n- 720p：1280*720，高清（HD）\n- 1080p：1920*1080，超清\n- 1440p：2560*1440，2k（QHD）\n- 2160p：3840*2160，4k（一般显示器极限）\n- 4320p：7680*4320，8k\n\n***分辨率越大，1px实际尺寸越小，屏幕越清晰***\n很简单的道理，相同尺寸的屏幕比如500mm，一个720p，一个1080p；那么1个像素点的尺寸=500/1280=0.39mm，500/1920=0.26mm；所以分辨率越高，1px越小；\n而且由这个计算公式可知：尺寸越大，像素点也越大，画面反而不精细了，这就和我们看微信头像，缩略图看着好清晰，放大之后看模糊的一塌糊涂，就是这个道理。所以买显示器不要过分的追求“大”～（扯远了嗷）\n\n### em\nem是相对单位，相对的是当前对象的文字尺寸，如果文字尺寸未设置，则以浏览器默认字体为准（16px）\n一般来说，用em的话，会在body选择器中指定一下font-size，统一一下1em的大小\n另外em有个坑需要注意，它会继承父级元素字体的大小，所以如果父级元素指定了大小，那么子元素的大小需要重新计算一下再指定\n\n### rem\nrem为css3新增的一个单位，也是相对单位，区别于em，它只相对于html根元素，避免了em的父级元素继承特点，所以用rem无后顾之忧，你只需管理根元素的字体大小即可\n*注意：只兼容IE8+*\n\n### vw/vh\nvw,vh也是css3新增的单位，也是相对单位，相对的是视窗的大小，100vw等于视窗宽度，100vh等于视窗高度；\n*注意：只兼容IE8+*\n\n> 具体用哪种单位？\n根据项目性质决定，web一般使用px，h5一般使用rem，小程序有自己的单位，app不晓得啦，以前我做react-native的时候也是有rn自带的单位","source":"_posts/2020-11-20-前端常用单位介绍.md","raw":"---\ntitle: 前端常用单位介绍\ndate: 2020-11-20 15:58:43\ncategories: [技术]\nkeywords: [前端常用单位,单位]\nimg: https://cdn.ldpro.top/cover/c3.jpg\ntags:\n- 单位\n---\n\n本文记录一下前端的常用单位，分别为：px、em、rem、vw(vh)\n\n### px\npx是大家最耳熟能详的，也叫像素，很多人可能以为它是一个绝对单位，实际上它是一个相对单位，相对于屏幕分辨率而言\n简单来说，分辨率和屏幕尺寸没有什么关系，作为一个前端来说，需要将注意力更多放在分辨率上，因为1px在分辨率不同的电脑上，显示的大小是不同的；\n常用分辨率：\n- 720p：1280*720，高清（HD）\n- 1080p：1920*1080，超清\n- 1440p：2560*1440，2k（QHD）\n- 2160p：3840*2160，4k（一般显示器极限）\n- 4320p：7680*4320，8k\n\n***分辨率越大，1px实际尺寸越小，屏幕越清晰***\n很简单的道理，相同尺寸的屏幕比如500mm，一个720p，一个1080p；那么1个像素点的尺寸=500/1280=0.39mm，500/1920=0.26mm；所以分辨率越高，1px越小；\n而且由这个计算公式可知：尺寸越大，像素点也越大，画面反而不精细了，这就和我们看微信头像，缩略图看着好清晰，放大之后看模糊的一塌糊涂，就是这个道理。所以买显示器不要过分的追求“大”～（扯远了嗷）\n\n### em\nem是相对单位，相对的是当前对象的文字尺寸，如果文字尺寸未设置，则以浏览器默认字体为准（16px）\n一般来说，用em的话，会在body选择器中指定一下font-size，统一一下1em的大小\n另外em有个坑需要注意，它会继承父级元素字体的大小，所以如果父级元素指定了大小，那么子元素的大小需要重新计算一下再指定\n\n### rem\nrem为css3新增的一个单位，也是相对单位，区别于em，它只相对于html根元素，避免了em的父级元素继承特点，所以用rem无后顾之忧，你只需管理根元素的字体大小即可\n*注意：只兼容IE8+*\n\n### vw/vh\nvw,vh也是css3新增的单位，也是相对单位，相对的是视窗的大小，100vw等于视窗宽度，100vh等于视窗高度；\n*注意：只兼容IE8+*\n\n> 具体用哪种单位？\n根据项目性质决定，web一般使用px，h5一般使用rem，小程序有自己的单位，app不晓得啦，以前我做react-native的时候也是有rn自带的单位","slug":"前端常用单位介绍","published":1,"updated":"2022-04-21T08:36:26.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgm000guwx288h0ejbn","content":"<p>本文记录一下前端的常用单位，分别为：px、em、rem、vw(vh)</p>\n<h3 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h3><p>px是大家最耳熟能详的，也叫像素，很多人可能以为它是一个绝对单位，实际上它是一个相对单位，相对于屏幕分辨率而言<br>简单来说，分辨率和屏幕尺寸没有什么关系，作为一个前端来说，需要将注意力更多放在分辨率上，因为1px在分辨率不同的电脑上，显示的大小是不同的；<br>常用分辨率：</p>\n<ul>\n<li>720p：1280*720，高清（HD）</li>\n<li>1080p：1920*1080，超清</li>\n<li>1440p：2560*1440，2k（QHD）</li>\n<li>2160p：3840*2160，4k（一般显示器极限）</li>\n<li>4320p：7680*4320，8k</li>\n</ul>\n<p><strong><em>分辨率越大，1px实际尺寸越小，屏幕越清晰</em></strong><br>很简单的道理，相同尺寸的屏幕比如500mm，一个720p，一个1080p；那么1个像素点的尺寸=500/1280=0.39mm，500/1920=0.26mm；所以分辨率越高，1px越小；<br>而且由这个计算公式可知：尺寸越大，像素点也越大，画面反而不精细了，这就和我们看微信头像，缩略图看着好清晰，放大之后看模糊的一塌糊涂，就是这个道理。所以买显示器不要过分的追求“大”～（扯远了嗷）</p>\n<h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>em是相对单位，相对的是当前对象的文字尺寸，如果文字尺寸未设置，则以浏览器默认字体为准（16px）<br>一般来说，用em的话，会在body选择器中指定一下font-size，统一一下1em的大小<br>另外em有个坑需要注意，它会继承父级元素字体的大小，所以如果父级元素指定了大小，那么子元素的大小需要重新计算一下再指定</p>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>rem为css3新增的一个单位，也是相对单位，区别于em，它只相对于html根元素，避免了em的父级元素继承特点，所以用rem无后顾之忧，你只需管理根元素的字体大小即可<br><em>注意：只兼容IE8+</em></p>\n<h3 id=\"vw-vh\"><a href=\"#vw-vh\" class=\"headerlink\" title=\"vw/vh\"></a>vw/vh</h3><p>vw,vh也是css3新增的单位，也是相对单位，相对的是视窗的大小，100vw等于视窗宽度，100vh等于视窗高度；<br><em>注意：只兼容IE8+</em></p>\n<blockquote>\n<p>具体用哪种单位？<br>根据项目性质决定，web一般使用px，h5一般使用rem，小程序有自己的单位，app不晓得啦，以前我做react-native的时候也是有rn自带的单位</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<p>本文记录一下前端的常用单位，分别为：px、em、rem、vw(vh)</p>\n<h3 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h3><p>px是大家最耳熟能详的，也叫像素，很多人可能以为它是一个绝对单位，实际上它是一个相对单位，相对于屏幕分辨率而言<br>简单来说，分辨率和屏幕尺寸没有什么关系，作为一个前端来说，需要将注意力更多放在分辨率上，因为1px在分辨率不同的电脑上，显示的大小是不同的；<br>常用分辨率：</p>\n<ul>\n<li>720p：1280*720，高清（HD）</li>\n<li>1080p：1920*1080，超清</li>\n<li>1440p：2560*1440，2k（QHD）</li>\n<li>2160p：3840*2160，4k（一般显示器极限）</li>\n<li>4320p：7680*4320，8k</li>\n</ul>\n<p><strong><em>分辨率越大，1px实际尺寸越小，屏幕越清晰</em></strong><br>很简单的道理，相同尺寸的屏幕比如500mm，一个720p，一个1080p；那么1个像素点的尺寸=500/1280=0.39mm，500/1920=0.26mm；所以分辨率越高，1px越小；<br>而且由这个计算公式可知：尺寸越大，像素点也越大，画面反而不精细了，这就和我们看微信头像，缩略图看着好清晰，放大之后看模糊的一塌糊涂，就是这个道理。所以买显示器不要过分的追求“大”～（扯远了嗷）</p>\n<h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>em是相对单位，相对的是当前对象的文字尺寸，如果文字尺寸未设置，则以浏览器默认字体为准（16px）<br>一般来说，用em的话，会在body选择器中指定一下font-size，统一一下1em的大小<br>另外em有个坑需要注意，它会继承父级元素字体的大小，所以如果父级元素指定了大小，那么子元素的大小需要重新计算一下再指定</p>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>rem为css3新增的一个单位，也是相对单位，区别于em，它只相对于html根元素，避免了em的父级元素继承特点，所以用rem无后顾之忧，你只需管理根元素的字体大小即可<br><em>注意：只兼容IE8+</em></p>\n<h3 id=\"vw-vh\"><a href=\"#vw-vh\" class=\"headerlink\" title=\"vw/vh\"></a>vw/vh</h3><p>vw,vh也是css3新增的单位，也是相对单位，相对的是视窗的大小，100vw等于视窗宽度，100vh等于视窗高度；<br><em>注意：只兼容IE8+</em></p>\n<blockquote>\n<p>具体用哪种单位？<br>根据项目性质决定，web一般使用px，h5一般使用rem，小程序有自己的单位，app不晓得啦，以前我做react-native的时候也是有rn自带的单位</p>\n</blockquote>\n"},{"title":"前端常用布局","date":"2021-03-12T06:49:53.000Z","img":"https://cdn.ldpro.top/cover/p1.jpg","_content":"\n最近发现了 css Layout 这个网站：<https://csslayout.io/>\n于是突发奇想，用纯 css 写几个常用布局看看，目前列举了以下四种：\n\n效果可查看该视频：\n<video controls width='100%' src='https://cdn.ldpro.top/layout-screen.mov' />\n\n### 单行等宽布局\n\n```js\n<h2>单行等宽布局</h2>\n    <div className='single-row-container'>\n    {new Array(4).fill(null).map((item) => {\n        return <div className='single-row-container-item'></div>;\n    })}\n</div>\n```\n\n```css\n.single-row-container {\n  display: flex;\n  flex-wrap: wrap;\n  width: 800px;\n  height: 150px;\n  background-color: #00b8ff;\n  align-items: center;\n  padding: 8px;\n  padding-left: 0;\n}\n\n.single-row-container-item {\n  flex: 1;\n  background-color: gray;\n  margin-left: 8px;\n  height: 100px;\n  position: relative;\n}\n```\n\n### 多行等宽布局\n\n```js\n<h2>多行等宽布局</h2>\n    <div className='multiple-row-container'>\n    {new Array(16).fill(null).map((item) => {\n        return (\n        <div className='multiple-row-container-item-box'>\n            <div className='multiple-row-container-item'></div>\n        </div>\n        );\n    })}\n</div>\n```\n\n```css\n.multiple-row-container {\n  display: flex;\n  flex-wrap: wrap;\n  width: 800px;\n  height: 600px;\n  background-color: #00b8ff;\n  align-items: center;\n  padding-right: 8px;\n}\n\n.multiple-row-container-item-box {\n  flex: 0 0 25%;\n  background-color: transparent;\n  height: 100px;\n  display: flex;\n}\n\n.multiple-row-container-item {\n  background-color: gray;\n  margin-left: 8px;\n  flex: 1;\n}\n```\n\n### 粘性布局\n\n```js\n<h2>粘性布局</h2>\n    <div className='sticky-container'>\n    {new Array(8).fill(null).map((item, index) => (\n        <div className='sticky-container-item'>元素{index + 1}</div>\n    ))}\n</div>\n```\n\n```css\n.sticky-container {\n  width: 800px;\n  height: 300px;\n  background-color: #00b8ff;\n  overflow: scroll;\n  color: #fff;\n  text-align: center;\n  line-height: 80px;\n}\n\n.sticky-container-item {\n  height: 80px;\n  position: sticky;\n  top: 0;\n  background-color: gray;\n  margin-bottom: 20px;\n}\n```\n\n### 圣杯布局\n\n```js\n<h2>圣杯</h2>\n    <div className='holy-grail-container'>\n    <header></header>\n    <main className='holy-grail-container-main'>\n        <aside></aside>\n        <article></article>\n        <nav></nav>\n    </main>\n    <footer></footer>\n</div>\n```\n\n```css\n.holy-grail-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 700px;\n  background-color: #00b8ff;\n}\n\n.holy-grail-container-main {\n  flex: 1;\n  display: flex;\n  border-top: 1px solid #eee;\n  border-bottom: 1px solid #eee;\n  box-sizing: border-box;\n}\n\n.holy-grail-container-main > aside {\n  width: 25%;\n  height: 100%;\n  border-right: 1px solid #eee;\n  box-sizing: border-box;\n}\n\n.holy-grail-container-main > article {\n  flex-grow: 1;\n  height: 100%;\n}\n\n.holy-grail-container-main > nav {\n  width: 25%;\n  height: 100%;\n  border-left: 1px solid #eee;\n  box-sizing: border-box;\n}\n\n.holy-grail-container > header,\nfooter {\n  height: 88px;\n}\n```\n","source":"_posts/2021-03-12-前端常用布局.md","raw":"---\ntitle: 前端常用布局\ndate: 2021-03-12 14:49:53\nimg: https://cdn.ldpro.top/cover/p1.jpg\ncategories: [技术]\ntags:\n  - 布局\n---\n\n最近发现了 css Layout 这个网站：<https://csslayout.io/>\n于是突发奇想，用纯 css 写几个常用布局看看，目前列举了以下四种：\n\n效果可查看该视频：\n<video controls width='100%' src='https://cdn.ldpro.top/layout-screen.mov' />\n\n### 单行等宽布局\n\n```js\n<h2>单行等宽布局</h2>\n    <div className='single-row-container'>\n    {new Array(4).fill(null).map((item) => {\n        return <div className='single-row-container-item'></div>;\n    })}\n</div>\n```\n\n```css\n.single-row-container {\n  display: flex;\n  flex-wrap: wrap;\n  width: 800px;\n  height: 150px;\n  background-color: #00b8ff;\n  align-items: center;\n  padding: 8px;\n  padding-left: 0;\n}\n\n.single-row-container-item {\n  flex: 1;\n  background-color: gray;\n  margin-left: 8px;\n  height: 100px;\n  position: relative;\n}\n```\n\n### 多行等宽布局\n\n```js\n<h2>多行等宽布局</h2>\n    <div className='multiple-row-container'>\n    {new Array(16).fill(null).map((item) => {\n        return (\n        <div className='multiple-row-container-item-box'>\n            <div className='multiple-row-container-item'></div>\n        </div>\n        );\n    })}\n</div>\n```\n\n```css\n.multiple-row-container {\n  display: flex;\n  flex-wrap: wrap;\n  width: 800px;\n  height: 600px;\n  background-color: #00b8ff;\n  align-items: center;\n  padding-right: 8px;\n}\n\n.multiple-row-container-item-box {\n  flex: 0 0 25%;\n  background-color: transparent;\n  height: 100px;\n  display: flex;\n}\n\n.multiple-row-container-item {\n  background-color: gray;\n  margin-left: 8px;\n  flex: 1;\n}\n```\n\n### 粘性布局\n\n```js\n<h2>粘性布局</h2>\n    <div className='sticky-container'>\n    {new Array(8).fill(null).map((item, index) => (\n        <div className='sticky-container-item'>元素{index + 1}</div>\n    ))}\n</div>\n```\n\n```css\n.sticky-container {\n  width: 800px;\n  height: 300px;\n  background-color: #00b8ff;\n  overflow: scroll;\n  color: #fff;\n  text-align: center;\n  line-height: 80px;\n}\n\n.sticky-container-item {\n  height: 80px;\n  position: sticky;\n  top: 0;\n  background-color: gray;\n  margin-bottom: 20px;\n}\n```\n\n### 圣杯布局\n\n```js\n<h2>圣杯</h2>\n    <div className='holy-grail-container'>\n    <header></header>\n    <main className='holy-grail-container-main'>\n        <aside></aside>\n        <article></article>\n        <nav></nav>\n    </main>\n    <footer></footer>\n</div>\n```\n\n```css\n.holy-grail-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 700px;\n  background-color: #00b8ff;\n}\n\n.holy-grail-container-main {\n  flex: 1;\n  display: flex;\n  border-top: 1px solid #eee;\n  border-bottom: 1px solid #eee;\n  box-sizing: border-box;\n}\n\n.holy-grail-container-main > aside {\n  width: 25%;\n  height: 100%;\n  border-right: 1px solid #eee;\n  box-sizing: border-box;\n}\n\n.holy-grail-container-main > article {\n  flex-grow: 1;\n  height: 100%;\n}\n\n.holy-grail-container-main > nav {\n  width: 25%;\n  height: 100%;\n  border-left: 1px solid #eee;\n  box-sizing: border-box;\n}\n\n.holy-grail-container > header,\nfooter {\n  height: 88px;\n}\n```\n","slug":"前端常用布局","published":1,"updated":"2022-04-21T08:36:31.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgn000huwx20c127011","content":"<p>最近发现了 css Layout 这个网站：<a href=\"https://csslayout.io/\">https://csslayout.io/</a><br>于是突发奇想，用纯 css 写几个常用布局看看，目前列举了以下四种：</p>\n<p>效果可查看该视频：<br><video controls width='100%' src='https://cdn.ldpro.top/layout-screen.mov' /></p>\n<h3 id=\"单行等宽布局\"><a href=\"#单行等宽布局\" class=\"headerlink\" title=\"单行等宽布局\"></a>单行等宽布局</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>单行等宽布局<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'single-row-container'</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'single-row-container-item'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.single-row-container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> wrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #00b8ff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.single-row-container-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"多行等宽布局\"><a href=\"#多行等宽布局\" class=\"headerlink\" title=\"多行等宽布局\"></a>多行等宽布局</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>多行等宽布局<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'multiple-row-container'</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'multiple-row-container-item-box'</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'multiple-row-container-item'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.multiple-row-container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> wrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #00b8ff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.multiple-row-container-item-box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 0 0 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.multiple-row-container-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"粘性布局\"><a href=\"#粘性布局\" class=\"headerlink\" title=\"粘性布局\"></a>粘性布局</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>粘性布局<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'sticky-container'</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'sticky-container-item'</span><span class=\"token operator\">></span>元素<span class=\"token punctuation\">&#123;</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.sticky-container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #00b8ff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 80px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.sticky-container-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 80px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> sticky<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>圣杯<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'holy-grail-container'</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>header<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>main className<span class=\"token operator\">=</span><span class=\"token string\">'holy-grail-container-main'</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>aside<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>aside<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>article<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>article<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>nav<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>nav<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>footer<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>footer<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.holy-grail-container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 700px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #00b8ff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container-main</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 1px solid #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 1px solid #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container-main > aside</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 1px solid #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container-main > article</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container-main > nav</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 1px solid #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container > header,\nfooter</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 88px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<p>最近发现了 css Layout 这个网站：<a href=\"https://csslayout.io/\">https://csslayout.io/</a><br>于是突发奇想，用纯 css 写几个常用布局看看，目前列举了以下四种：</p>\n<p>效果可查看该视频：<br><video controls width='100%' src='https://cdn.ldpro.top/layout-screen.mov' /></p>\n<h3 id=\"单行等宽布局\"><a href=\"#单行等宽布局\" class=\"headerlink\" title=\"单行等宽布局\"></a>单行等宽布局</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>单行等宽布局<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'single-row-container'</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'single-row-container-item'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.single-row-container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> wrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #00b8ff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.single-row-container-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"多行等宽布局\"><a href=\"#多行等宽布局\" class=\"headerlink\" title=\"多行等宽布局\"></a>多行等宽布局</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>多行等宽布局<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'multiple-row-container'</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'multiple-row-container-item-box'</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'multiple-row-container-item'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.multiple-row-container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> wrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #00b8ff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.multiple-row-container-item-box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 0 0 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.multiple-row-container-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"粘性布局\"><a href=\"#粘性布局\" class=\"headerlink\" title=\"粘性布局\"></a>粘性布局</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>粘性布局<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'sticky-container'</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'sticky-container-item'</span><span class=\"token operator\">></span>元素<span class=\"token punctuation\">&#123;</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.sticky-container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #00b8ff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 80px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.sticky-container-item</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 80px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> sticky<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>圣杯<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'holy-grail-container'</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>header<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>main className<span class=\"token operator\">=</span><span class=\"token string\">'holy-grail-container-main'</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>aside<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>aside<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>article<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>article<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>nav<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>nav<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>footer<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>footer<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.holy-grail-container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 700px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #00b8ff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container-main</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 1px solid #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 1px solid #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container-main > aside</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 1px solid #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container-main > article</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container-main > nav</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 1px solid #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.holy-grail-container > header,\nfooter</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 88px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"音乐小馆","date":"2021-04-15T08:51:46.000Z","img":"https://cdn.ldpro.top/cover/c4.jpg","_content":"\n在这篇文章里，记录我的尤克里里学习之路，学会的曲子会录成视频上传，留作纪念～\n\n### 学会的第一首弹唱曲：《情非得已》\n\n<video controls width='100%' src='https://cdn.ldpro.top/music1.mp4'></video>\n\n### 双音：《夏威夷小曲子》\n\n<video controls width=\"60%\" src='https://cdn.ldpro.top/music2.mp4'></video>\n\n### 指弹曲：《虫儿飞》\n\n<video controls width=\"100%\" src='https://cdn.ldpro.top/music3.mp4'></video>","source":"_posts/2021-04-15-音乐小馆.md","raw":"---\ntitle: 音乐小馆\ndate: 2021-04-15 16:51:46\nimg: https://cdn.ldpro.top/cover/c4.jpg\ncategories: [生活]\ntags:\n- 音乐\n- 尤克里里\n---\n\n在这篇文章里，记录我的尤克里里学习之路，学会的曲子会录成视频上传，留作纪念～\n\n### 学会的第一首弹唱曲：《情非得已》\n\n<video controls width='100%' src='https://cdn.ldpro.top/music1.mp4'></video>\n\n### 双音：《夏威夷小曲子》\n\n<video controls width=\"60%\" src='https://cdn.ldpro.top/music2.mp4'></video>\n\n### 指弹曲：《虫儿飞》\n\n<video controls width=\"100%\" src='https://cdn.ldpro.top/music3.mp4'></video>","slug":"音乐小馆","published":1,"updated":"2022-04-21T08:36:40.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgp000luwx2h6zrhs2v","content":"<p>在这篇文章里，记录我的尤克里里学习之路，学会的曲子会录成视频上传，留作纪念～</p>\n<h3 id=\"学会的第一首弹唱曲：《情非得已》\"><a href=\"#学会的第一首弹唱曲：《情非得已》\" class=\"headerlink\" title=\"学会的第一首弹唱曲：《情非得已》\"></a>学会的第一首弹唱曲：《情非得已》</h3><p><video controls width='100%' src='https://cdn.ldpro.top/music1.mp4'></video></p>\n<h3 id=\"双音：《夏威夷小曲子》\"><a href=\"#双音：《夏威夷小曲子》\" class=\"headerlink\" title=\"双音：《夏威夷小曲子》\"></a>双音：《夏威夷小曲子》</h3><p><video controls width=\"60%\" src='https://cdn.ldpro.top/music2.mp4'></video></p>\n<h3 id=\"指弹曲：《虫儿飞》\"><a href=\"#指弹曲：《虫儿飞》\" class=\"headerlink\" title=\"指弹曲：《虫儿飞》\"></a>指弹曲：《虫儿飞》</h3><p><video controls width=\"100%\" src='https://cdn.ldpro.top/music3.mp4'></video></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<p>在这篇文章里，记录我的尤克里里学习之路，学会的曲子会录成视频上传，留作纪念～</p>\n<h3 id=\"学会的第一首弹唱曲：《情非得已》\"><a href=\"#学会的第一首弹唱曲：《情非得已》\" class=\"headerlink\" title=\"学会的第一首弹唱曲：《情非得已》\"></a>学会的第一首弹唱曲：《情非得已》</h3><p><video controls width='100%' src='https://cdn.ldpro.top/music1.mp4'></video></p>\n<h3 id=\"双音：《夏威夷小曲子》\"><a href=\"#双音：《夏威夷小曲子》\" class=\"headerlink\" title=\"双音：《夏威夷小曲子》\"></a>双音：《夏威夷小曲子》</h3><p><video controls width=\"60%\" src='https://cdn.ldpro.top/music2.mp4'></video></p>\n<h3 id=\"指弹曲：《虫儿飞》\"><a href=\"#指弹曲：《虫儿飞》\" class=\"headerlink\" title=\"指弹曲：《虫儿飞》\"></a>指弹曲：《虫儿飞》</h3><p><video controls width=\"100%\" src='https://cdn.ldpro.top/music3.mp4'></video></p>\n"},{"title":"关于防抖、节流","date":"2021-05-31T09:20:48.000Z","img":"https://cdn.ldpro.top/cover/c5.jpg","_content":"\n防抖，节流是前端业务中经常用到的一种优化手段，能极大的节省内存开销和前后端交互次数\n我本人防抖用过几次，节流倒是没接触过，于是特地研究了一下，发现这两者其实大同小异；\n\n防抖就是设定一个延迟，在这个延迟时间内如果多次调用，只执行最后一次调用\n节流就是设定一个最大时间，在这个时间内管你调用多少次，也只会调用一次，通俗的讲就是采用固定频率\n\n所以这两个本质上没区别，都是为了在多次快速频繁调用时，只调用一次。\n不过一个是取最后一次调用，一个是取第一次调用的结果（反正我个人理解是这样😂）\n\n正常业务中，为了适应快速开发，防抖和节流不用自己写，一般用lodash的 ***debounce*** 和 ***throttle***\n\n自己手写的话，可以参考如下代码：\n\n### 防抖\n```js\nimport React, { useState } from \"react\";\n\nvar init1 = 0;\nvar timer1 = null; //初始化timer，作为计时清除依据\n\nfunction App() {\n  const [view1, setView1] = useState(null);\n  function handleClick1() {\n    let res = debounce(\n      function () {\n        init1++;\n        setView1(init1);\n      },\n      1000,\n      false\n    );\n    res();\n  }\n  return (\n    <div>\n      <h2>防抖</h2>\n      <button id=\"btn\" onClick={handleClick1}>\n        click\n      </button>\n      <div id=\"display\" style={{ height: 100 }}>\n        {view1}\n      </div>\n    </div>\n  );\n}\n\n/**\n * 防反跳。fn函数在最后一次调用时刻的delay毫秒之后执行！\n * @param fn 执行函数\n * @param delay 时间间隔\n * @param isImmediate 为true，debounce会在delay时间间隔的开始时立即调用这个函数\n * @returns {Function}\n */\nfunction debounce(fn, delay, isImmediate) {\n  console.log(\"执行\");\n  return function () {\n    var context = this; //获取函数所在作用域this\n    var args = arguments; //取得传入参数\n    clearTimeout(timer1);\n    if (isImmediate && timer1 === null) {\n      //时间间隔外立即执行\n      fn.apply(context, args);\n      timer1 = 0;\n      return;\n    }\n    timer1 = setTimeout(function () {\n      fn.apply(context, args);\n      timer1 = null;\n    }, delay);\n  };\n}\n\nexport default App;\n```\n\n### 节流\n```js\nimport React, { useState } from \"react\";\n\nvar init2 = 0;\nvar timer2 = null;\nvar timeStamp = new Date();\n\nfunction App() {\n  const [view2, setView2] = useState(null);\n  function handleClick2() {\n    let res = throttle(function () {\n      init2++;\n      setView2(init2);\n    }, 1000);\n    res();\n  }\n  return (\n    <div>\n      <h2>节流</h2>\n      <button id=\"btn\" onClick={handleClick2}>\n        click\n      </button>\n      <div id=\"display\" style={{ height: 100 }}>\n        {view2}\n      </div>\n    </div>\n  );\n}\n\nfunction throttle(fn, delay) {\n  return function () {\n    var context = this; //获取函数所在作用域this\n    var args = arguments; //取得传入参数\n    if (new Date() - timeStamp > delay) {\n      timeStamp = new Date();\n      timer2 = setTimeout(function () {\n        fn.apply(context, args);\n      }, delay);\n    }\n  };\n}\n\nexport default App;\n```\n\n### React 自定义Hooks 写法\n```js\nimport { useState, useEffect } from \"react\";\nfunction useDebounce(value: any, delay = 300) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n}\n\nexport default useDebounce;\n```\n\n效果可查看该视频：\n<video controls width='100%' src='https://cdn.ldpro.top/fd-screen.mov' />\n","source":"_posts/2021-05-31-关于防抖、节流.md","raw":"---\ntitle: 关于防抖、节流\ndate: 2021-05-31 17:20:48\nimg: https://cdn.ldpro.top/cover/c5.jpg\ncategories: [技术]\ntags:\n  - 性能优化\n---\n\n防抖，节流是前端业务中经常用到的一种优化手段，能极大的节省内存开销和前后端交互次数\n我本人防抖用过几次，节流倒是没接触过，于是特地研究了一下，发现这两者其实大同小异；\n\n防抖就是设定一个延迟，在这个延迟时间内如果多次调用，只执行最后一次调用\n节流就是设定一个最大时间，在这个时间内管你调用多少次，也只会调用一次，通俗的讲就是采用固定频率\n\n所以这两个本质上没区别，都是为了在多次快速频繁调用时，只调用一次。\n不过一个是取最后一次调用，一个是取第一次调用的结果（反正我个人理解是这样😂）\n\n正常业务中，为了适应快速开发，防抖和节流不用自己写，一般用lodash的 ***debounce*** 和 ***throttle***\n\n自己手写的话，可以参考如下代码：\n\n### 防抖\n```js\nimport React, { useState } from \"react\";\n\nvar init1 = 0;\nvar timer1 = null; //初始化timer，作为计时清除依据\n\nfunction App() {\n  const [view1, setView1] = useState(null);\n  function handleClick1() {\n    let res = debounce(\n      function () {\n        init1++;\n        setView1(init1);\n      },\n      1000,\n      false\n    );\n    res();\n  }\n  return (\n    <div>\n      <h2>防抖</h2>\n      <button id=\"btn\" onClick={handleClick1}>\n        click\n      </button>\n      <div id=\"display\" style={{ height: 100 }}>\n        {view1}\n      </div>\n    </div>\n  );\n}\n\n/**\n * 防反跳。fn函数在最后一次调用时刻的delay毫秒之后执行！\n * @param fn 执行函数\n * @param delay 时间间隔\n * @param isImmediate 为true，debounce会在delay时间间隔的开始时立即调用这个函数\n * @returns {Function}\n */\nfunction debounce(fn, delay, isImmediate) {\n  console.log(\"执行\");\n  return function () {\n    var context = this; //获取函数所在作用域this\n    var args = arguments; //取得传入参数\n    clearTimeout(timer1);\n    if (isImmediate && timer1 === null) {\n      //时间间隔外立即执行\n      fn.apply(context, args);\n      timer1 = 0;\n      return;\n    }\n    timer1 = setTimeout(function () {\n      fn.apply(context, args);\n      timer1 = null;\n    }, delay);\n  };\n}\n\nexport default App;\n```\n\n### 节流\n```js\nimport React, { useState } from \"react\";\n\nvar init2 = 0;\nvar timer2 = null;\nvar timeStamp = new Date();\n\nfunction App() {\n  const [view2, setView2] = useState(null);\n  function handleClick2() {\n    let res = throttle(function () {\n      init2++;\n      setView2(init2);\n    }, 1000);\n    res();\n  }\n  return (\n    <div>\n      <h2>节流</h2>\n      <button id=\"btn\" onClick={handleClick2}>\n        click\n      </button>\n      <div id=\"display\" style={{ height: 100 }}>\n        {view2}\n      </div>\n    </div>\n  );\n}\n\nfunction throttle(fn, delay) {\n  return function () {\n    var context = this; //获取函数所在作用域this\n    var args = arguments; //取得传入参数\n    if (new Date() - timeStamp > delay) {\n      timeStamp = new Date();\n      timer2 = setTimeout(function () {\n        fn.apply(context, args);\n      }, delay);\n    }\n  };\n}\n\nexport default App;\n```\n\n### React 自定义Hooks 写法\n```js\nimport { useState, useEffect } from \"react\";\nfunction useDebounce(value: any, delay = 300) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n}\n\nexport default useDebounce;\n```\n\n效果可查看该视频：\n<video controls width='100%' src='https://cdn.ldpro.top/fd-screen.mov' />\n","slug":"关于防抖、节流","published":1,"updated":"2022-04-29T11:14:51.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgt000muwx22scvhtc6","content":"<p>防抖，节流是前端业务中经常用到的一种优化手段，能极大的节省内存开销和前后端交互次数<br>我本人防抖用过几次，节流倒是没接触过，于是特地研究了一下，发现这两者其实大同小异；</p>\n<p>防抖就是设定一个延迟，在这个延迟时间内如果多次调用，只执行最后一次调用<br>节流就是设定一个最大时间，在这个时间内管你调用多少次，也只会调用一次，通俗的讲就是采用固定频率</p>\n<p>所以这两个本质上没区别，都是为了在多次快速频繁调用时，只调用一次。<br>不过一个是取最后一次调用，一个是取第一次调用的结果（反正我个人理解是这样😂）</p>\n<p>正常业务中，为了适应快速开发，防抖和节流不用自己写，一般用lodash的 <strong><em>debounce</em></strong> 和 <strong><em>throttle</em></strong></p>\n<p>自己手写的话，可以参考如下代码：</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> init1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> timer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化timer，作为计时清除依据</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>view1<span class=\"token punctuation\">,</span> setView1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        init1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setView1</span><span class=\"token punctuation\">(</span>init1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>防抖<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleClick1<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"display\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> height<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">&#123;</span>view1<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * 防反跳。fn函数在最后一次调用时刻的delay毫秒之后执行！\n * @param fn 执行函数\n * @param delay 时间间隔\n * @param isImmediate 为true，debounce会在delay时间间隔的开始时立即调用这个函数\n * @returns &#123;Function&#125;\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">,</span> isImmediate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取函数所在作用域this</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span> <span class=\"token comment\">//取得传入参数</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isImmediate <span class=\"token operator\">&amp;&amp;</span> timer1 <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//时间间隔外立即执行</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      timer1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    timer1 <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      timer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> init2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> timer2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> timeStamp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>view2<span class=\"token punctuation\">,</span> setView2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      init2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setView2</span><span class=\"token punctuation\">(</span>init2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>节流<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleClick2<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"display\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> height<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">&#123;</span>view2<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取函数所在作用域this</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span> <span class=\"token comment\">//取得传入参数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> timeStamp <span class=\"token operator\">></span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      timeStamp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      timer2 <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"React-自定义Hooks-写法\"><a href=\"#React-自定义Hooks-写法\" class=\"headerlink\" title=\"React 自定义Hooks 写法\"></a>React 自定义Hooks 写法</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useDebounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">300</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>debouncedValue<span class=\"token punctuation\">,</span> setDebouncedValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setDebouncedValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> debouncedValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useDebounce<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>效果可查看该视频：<br><video controls width='100%' src='https://cdn.ldpro.top/fd-screen.mov' /></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<p>防抖，节流是前端业务中经常用到的一种优化手段，能极大的节省内存开销和前后端交互次数<br>我本人防抖用过几次，节流倒是没接触过，于是特地研究了一下，发现这两者其实大同小异；</p>\n<p>防抖就是设定一个延迟，在这个延迟时间内如果多次调用，只执行最后一次调用<br>节流就是设定一个最大时间，在这个时间内管你调用多少次，也只会调用一次，通俗的讲就是采用固定频率</p>\n<p>所以这两个本质上没区别，都是为了在多次快速频繁调用时，只调用一次。<br>不过一个是取最后一次调用，一个是取第一次调用的结果（反正我个人理解是这样😂）</p>\n<p>正常业务中，为了适应快速开发，防抖和节流不用自己写，一般用lodash的 <strong><em>debounce</em></strong> 和 <strong><em>throttle</em></strong></p>\n<p>自己手写的话，可以参考如下代码：</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> init1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> timer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化timer，作为计时清除依据</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>view1<span class=\"token punctuation\">,</span> setView1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        init1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setView1</span><span class=\"token punctuation\">(</span>init1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>防抖<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleClick1<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"display\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> height<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">&#123;</span>view1<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * 防反跳。fn函数在最后一次调用时刻的delay毫秒之后执行！\n * @param fn 执行函数\n * @param delay 时间间隔\n * @param isImmediate 为true，debounce会在delay时间间隔的开始时立即调用这个函数\n * @returns &#123;Function&#125;\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">,</span> isImmediate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取函数所在作用域this</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span> <span class=\"token comment\">//取得传入参数</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isImmediate <span class=\"token operator\">&amp;&amp;</span> timer1 <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//时间间隔外立即执行</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      timer1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    timer1 <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      timer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> init2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> timer2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> timeStamp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>view2<span class=\"token punctuation\">,</span> setView2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      init2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setView2</span><span class=\"token punctuation\">(</span>init2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>节流<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleClick2<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"display\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> height<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">&#123;</span>view2<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取函数所在作用域this</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span> <span class=\"token comment\">//取得传入参数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> timeStamp <span class=\"token operator\">></span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      timeStamp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      timer2 <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"React-自定义Hooks-写法\"><a href=\"#React-自定义Hooks-写法\" class=\"headerlink\" title=\"React 自定义Hooks 写法\"></a>React 自定义Hooks 写法</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useDebounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">300</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>debouncedValue<span class=\"token punctuation\">,</span> setDebouncedValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setDebouncedValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> debouncedValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useDebounce<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>效果可查看该视频：<br><video controls width='100%' src='https://cdn.ldpro.top/fd-screen.mov' /></p>\n"},{"title":"dockerの小试牛刀","date":"2021-10-15T06:10:04.000Z","img":"https://cdn.ldpro.top/cover/docker.jpg","_content":"\ndocker现在作为最热门的部署技术之一，作为一个前端也是有必要学习哒!\nenmmmmm，不过作为一个前端，加上公司也很少用docker，接触的机会实在太少了，根本没有实操机会啊喂，这两天盲人摸🐘般的搞了点皮毛，写下一点点心得：\n\n### 什么是docker\n一套开源的、可以搭建虚拟环境的应用容器引擎。特点是隔离化、容器化。\n### docker是干啥用的\n通过docker，可以把本地的运行环境移植到一个镜像中，在服务器端就可以直接用上这套环境来进行部署，省去了不同环境之间的转换和不兼容。\n所以，从作用上来看，似乎和虚拟机有点像。\n### docker的优点\n比虚拟机而言，docker启动迅速，开箱即用；内存占用少\n\n### docker的安装\n安装方法网上一搜一大堆，我的电脑是macOS系统，可以直接用homebrew安装，或者也可以手动去官网下载安装包\n\n### docker的核心概念\n1. 镜像\n镜像是docker的地基，docker官方也有专门的镜像库，提供容器运行时所需的运行环境；\n相关命令：\n    ***列出本地镜像列表*** `docker images`\n    ***获取镜像*** \b`docker pull xxx`\n    ***查找镜像*** `docker search xxx`\n    ***删除镜像*** `docker rmi xxx`\n    ***更新/提交镜像*** `docker commit -m=? -a=? 容器id xxx`\n2. 容器\n容器是镜像的实例，只有把镜像容器化了才可以在本地使用；\n相关命令：(xxx代表镜像名)\n    ***查看运行中容器*** `docker ps`\n    ***创建容器*** `docker run [OPTIONS] xxx [COMMAND] `\n    OPTIONS说明：\n    -d 后台运行容器\n    -i 交互模式运行\n    -t 为容器分配一个伪输入终端\n    -p 指定端口映射，格式`主机端口:容器端口`\n    -P 随机端口映射\n    --name 为容器指定名称\n    -v 绑定卷，一般用于数据传输\n    上面都是常用的参数，不常用的就不列举了，可以找文档看；此外，-d,-t,-i可以合并写，比如-it,-itd\n举例：\n使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx\n`docker run -d --name mynginx -d nginx:latest`\n使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。\n`docker run -d -p 80:80 -v /data:/data nginx:latest`\n\n此外，容器和容器之间也可以进行互联，方法是先建立一个docker网络\n`docker network create -d bridge test-net`\n之后创建两个或多个容器，用--network test-net来加入该网络\n\n3. 仓库\n仓库是集中存放镜像的地方，官方有[Docker Hub](https://hub.docker.com)\n\n那么身为一个前端，部署方面最先要接触的必须是nginx，接下来就以nginx的部署为例\n\n拉取nginx镜像：\n`docker pull nginx:latest`\n\n运行一个nginx容器：\n`docker run --name nginx-test -p 80:80 -d nginx`\n\n运行完后看本地ip能否访问,如成功应该出现'Welcome to nginx!'页面(这里我用的8081端口，因为80端口被占用了)\n<img src=\"https://cdn.ldpro.top/docker-nginx.jpg\" width=\"80%\">\n\n之后我们进入该容器\n`docker exec -it 容器id bash`\n\nnginx容器的默认nginx存放地址为/usr/share/nginx/html/index.html，理论上我们直接把前端包放进去就ok了。\n但是如何把本机文件拷贝到容器里呢？\n\n两种方法：\n1. 通过映射：\n`docker run --name nginx-blog -p 80:80 -d -v /Users/lidong/Documents/blog/public:/usr/share/nginx/html nginx:latest`\n这里我是直接把本机的前端包映射到容器对应的nginx目录,简单粗暴。\n\n2. 进一步配置，通过dockerfile\nDockerfile是docker的一个统一配置文件，类似于nginx的nginx.conf，用来配置一个自定义的镜像.\n我们在本地创建一个Dockerfile文件夹，里面有一个Dockerfile文件.\n`mkdir Dockerfile`  `touch Dockerfile`\n然后在/Dockerfile/创建web文件夹，在/Dockerfile/web/创建front文件夹，然后把前端dist拖到/Dockerfile/web/front/。\n\n编辑Dockerfile:\n```\nFROM nginx:latest\nCOPY /web/front/dist /usr/share/nginx/html\n```\n这两条指令的意思是我们自定义的这个镜像，基于nginx:latest，然后复制本地/web/front/dist文件到容器/usr/share/nginx/html目录\n\n关于Dockerfile的指令，可参照这篇文章：<https://www.runoob.com/docker/docker-dockerfile.html>\n\n之后进入Dockerfile文件夹，开始构建镜像:\n`docker build -t web-front:latest .` //创建一个名称标签为web-front:latest的镜像\n\n输入docker images查看镜像\n<img src=\"https://cdn.ldpro.top/docker-nginx2.jpg\" width=\"80%\">\n\n运行容器\n`docker run -itd --name web-front-1 -p 80:80 web-front bash`\n\n进入容器\n`docker exec -it 容器id bash`\n\n运行`/usr/sbin/nginx`开启nginx服务\n\n好了，可以访问了~\n<img src=\"https://cdn.ldpro.top/docker-nginx3.jpg\" width=\"100%\">\n\n*参考文章：*\n- <https://juejin.cn/post/6844904022659301383#heading-9>\n- <https://juejin.cn/post/6844903591375814669>\n- <https://www.cnblogs.com/saneri/p/11799865.html>\n- <https://www.runoob.com/docker/docker-tutorial.html>\n\n","source":"_posts/2021-10-15-dockerの小试牛刀.md","raw":"---\ntitle: dockerの小试牛刀\ndate: 2021-10-15 14:10:04\nimg: https://cdn.ldpro.top/cover/docker.jpg\ncategories: [技术]\ntags:\n  - docker\n---\n\ndocker现在作为最热门的部署技术之一，作为一个前端也是有必要学习哒!\nenmmmmm，不过作为一个前端，加上公司也很少用docker，接触的机会实在太少了，根本没有实操机会啊喂，这两天盲人摸🐘般的搞了点皮毛，写下一点点心得：\n\n### 什么是docker\n一套开源的、可以搭建虚拟环境的应用容器引擎。特点是隔离化、容器化。\n### docker是干啥用的\n通过docker，可以把本地的运行环境移植到一个镜像中，在服务器端就可以直接用上这套环境来进行部署，省去了不同环境之间的转换和不兼容。\n所以，从作用上来看，似乎和虚拟机有点像。\n### docker的优点\n比虚拟机而言，docker启动迅速，开箱即用；内存占用少\n\n### docker的安装\n安装方法网上一搜一大堆，我的电脑是macOS系统，可以直接用homebrew安装，或者也可以手动去官网下载安装包\n\n### docker的核心概念\n1. 镜像\n镜像是docker的地基，docker官方也有专门的镜像库，提供容器运行时所需的运行环境；\n相关命令：\n    ***列出本地镜像列表*** `docker images`\n    ***获取镜像*** \b`docker pull xxx`\n    ***查找镜像*** `docker search xxx`\n    ***删除镜像*** `docker rmi xxx`\n    ***更新/提交镜像*** `docker commit -m=? -a=? 容器id xxx`\n2. 容器\n容器是镜像的实例，只有把镜像容器化了才可以在本地使用；\n相关命令：(xxx代表镜像名)\n    ***查看运行中容器*** `docker ps`\n    ***创建容器*** `docker run [OPTIONS] xxx [COMMAND] `\n    OPTIONS说明：\n    -d 后台运行容器\n    -i 交互模式运行\n    -t 为容器分配一个伪输入终端\n    -p 指定端口映射，格式`主机端口:容器端口`\n    -P 随机端口映射\n    --name 为容器指定名称\n    -v 绑定卷，一般用于数据传输\n    上面都是常用的参数，不常用的就不列举了，可以找文档看；此外，-d,-t,-i可以合并写，比如-it,-itd\n举例：\n使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx\n`docker run -d --name mynginx -d nginx:latest`\n使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。\n`docker run -d -p 80:80 -v /data:/data nginx:latest`\n\n此外，容器和容器之间也可以进行互联，方法是先建立一个docker网络\n`docker network create -d bridge test-net`\n之后创建两个或多个容器，用--network test-net来加入该网络\n\n3. 仓库\n仓库是集中存放镜像的地方，官方有[Docker Hub](https://hub.docker.com)\n\n那么身为一个前端，部署方面最先要接触的必须是nginx，接下来就以nginx的部署为例\n\n拉取nginx镜像：\n`docker pull nginx:latest`\n\n运行一个nginx容器：\n`docker run --name nginx-test -p 80:80 -d nginx`\n\n运行完后看本地ip能否访问,如成功应该出现'Welcome to nginx!'页面(这里我用的8081端口，因为80端口被占用了)\n<img src=\"https://cdn.ldpro.top/docker-nginx.jpg\" width=\"80%\">\n\n之后我们进入该容器\n`docker exec -it 容器id bash`\n\nnginx容器的默认nginx存放地址为/usr/share/nginx/html/index.html，理论上我们直接把前端包放进去就ok了。\n但是如何把本机文件拷贝到容器里呢？\n\n两种方法：\n1. 通过映射：\n`docker run --name nginx-blog -p 80:80 -d -v /Users/lidong/Documents/blog/public:/usr/share/nginx/html nginx:latest`\n这里我是直接把本机的前端包映射到容器对应的nginx目录,简单粗暴。\n\n2. 进一步配置，通过dockerfile\nDockerfile是docker的一个统一配置文件，类似于nginx的nginx.conf，用来配置一个自定义的镜像.\n我们在本地创建一个Dockerfile文件夹，里面有一个Dockerfile文件.\n`mkdir Dockerfile`  `touch Dockerfile`\n然后在/Dockerfile/创建web文件夹，在/Dockerfile/web/创建front文件夹，然后把前端dist拖到/Dockerfile/web/front/。\n\n编辑Dockerfile:\n```\nFROM nginx:latest\nCOPY /web/front/dist /usr/share/nginx/html\n```\n这两条指令的意思是我们自定义的这个镜像，基于nginx:latest，然后复制本地/web/front/dist文件到容器/usr/share/nginx/html目录\n\n关于Dockerfile的指令，可参照这篇文章：<https://www.runoob.com/docker/docker-dockerfile.html>\n\n之后进入Dockerfile文件夹，开始构建镜像:\n`docker build -t web-front:latest .` //创建一个名称标签为web-front:latest的镜像\n\n输入docker images查看镜像\n<img src=\"https://cdn.ldpro.top/docker-nginx2.jpg\" width=\"80%\">\n\n运行容器\n`docker run -itd --name web-front-1 -p 80:80 web-front bash`\n\n进入容器\n`docker exec -it 容器id bash`\n\n运行`/usr/sbin/nginx`开启nginx服务\n\n好了，可以访问了~\n<img src=\"https://cdn.ldpro.top/docker-nginx3.jpg\" width=\"100%\">\n\n*参考文章：*\n- <https://juejin.cn/post/6844904022659301383#heading-9>\n- <https://juejin.cn/post/6844903591375814669>\n- <https://www.cnblogs.com/saneri/p/11799865.html>\n- <https://www.runoob.com/docker/docker-tutorial.html>\n\n","slug":"dockerの小试牛刀","published":1,"updated":"2022-04-21T08:36:59.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgv000quwx2a9bfcgjs","content":"<p>docker现在作为最热门的部署技术之一，作为一个前端也是有必要学习哒!<br>enmmmmm，不过作为一个前端，加上公司也很少用docker，接触的机会实在太少了，根本没有实操机会啊喂，这两天盲人摸🐘般的搞了点皮毛，写下一点点心得：</p>\n<h3 id=\"什么是docker\"><a href=\"#什么是docker\" class=\"headerlink\" title=\"什么是docker\"></a>什么是docker</h3><p>一套开源的、可以搭建虚拟环境的应用容器引擎。特点是隔离化、容器化。</p>\n<h3 id=\"docker是干啥用的\"><a href=\"#docker是干啥用的\" class=\"headerlink\" title=\"docker是干啥用的\"></a>docker是干啥用的</h3><p>通过docker，可以把本地的运行环境移植到一个镜像中，在服务器端就可以直接用上这套环境来进行部署，省去了不同环境之间的转换和不兼容。<br>所以，从作用上来看，似乎和虚拟机有点像。</p>\n<h3 id=\"docker的优点\"><a href=\"#docker的优点\" class=\"headerlink\" title=\"docker的优点\"></a>docker的优点</h3><p>比虚拟机而言，docker启动迅速，开箱即用；内存占用少</p>\n<h3 id=\"docker的安装\"><a href=\"#docker的安装\" class=\"headerlink\" title=\"docker的安装\"></a>docker的安装</h3><p>安装方法网上一搜一大堆，我的电脑是macOS系统，可以直接用homebrew安装，或者也可以手动去官网下载安装包</p>\n<h3 id=\"docker的核心概念\"><a href=\"#docker的核心概念\" class=\"headerlink\" title=\"docker的核心概念\"></a>docker的核心概念</h3><ol>\n<li>镜像<br>镜像是docker的地基，docker官方也有专门的镜像库，提供容器运行时所需的运行环境；<br>相关命令：<br> <strong><em>列出本地镜像列表</em></strong> <code>docker images</code><br> <strong><em>获取镜像</em></strong> \b<code>docker pull xxx</code><br> <strong><em>查找镜像</em></strong> <code>docker search xxx</code><br> <strong><em>删除镜像</em></strong> <code>docker rmi xxx</code><br> <strong><em>更新/提交镜像</em></strong> <code>docker commit -m=? -a=? 容器id xxx</code></li>\n<li>容器<br>容器是镜像的实例，只有把镜像容器化了才可以在本地使用；<br>相关命令：(xxx代表镜像名)<br> <strong><em>查看运行中容器</em></strong> <code>docker ps</code><br> <strong><em>创建容器</em></strong> <code>docker run [OPTIONS] xxx [COMMAND] </code><br> OPTIONS说明：<br> -d 后台运行容器<br> -i 交互模式运行<br> -t 为容器分配一个伪输入终端<br> -p 指定端口映射，格式<code>主机端口:容器端口</code><br> -P 随机端口映射<br> –name 为容器指定名称<br> -v 绑定卷，一般用于数据传输<br> 上面都是常用的参数，不常用的就不列举了，可以找文档看；此外，-d,-t,-i可以合并写，比如-it,-itd<br>举例：<br>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx<br><code>docker run -d --name mynginx -d nginx:latest</code><br>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。<br><code>docker run -d -p 80:80 -v /data:/data nginx:latest</code></li>\n</ol>\n<p>此外，容器和容器之间也可以进行互联，方法是先建立一个docker网络<br><code>docker network create -d bridge test-net</code><br>之后创建两个或多个容器，用–network test-net来加入该网络</p>\n<ol start=\"3\">\n<li>仓库<br>仓库是集中存放镜像的地方，官方有<a href=\"https://hub.docker.com/\">Docker Hub</a></li>\n</ol>\n<p>那么身为一个前端，部署方面最先要接触的必须是nginx，接下来就以nginx的部署为例</p>\n<p>拉取nginx镜像：<br><code>docker pull nginx:latest</code></p>\n<p>运行一个nginx容器：<br><code>docker run --name nginx-test -p 80:80 -d nginx</code></p>\n<p>运行完后看本地ip能否访问,如成功应该出现’Welcome to nginx!’页面(这里我用的8081端口，因为80端口被占用了)<br><img src=\"https://cdn.ldpro.top/docker-nginx.jpg\" width=\"80%\"></p>\n<p>之后我们进入该容器<br><code>docker exec -it 容器id bash</code></p>\n<p>nginx容器的默认nginx存放地址为/usr/share/nginx/html/index.html，理论上我们直接把前端包放进去就ok了。<br>但是如何把本机文件拷贝到容器里呢？</p>\n<p>两种方法：</p>\n<ol>\n<li><p>通过映射：<br><code>docker run --name nginx-blog -p 80:80 -d -v /Users/lidong/Documents/blog/public:/usr/share/nginx/html nginx:latest</code><br>这里我是直接把本机的前端包映射到容器对应的nginx目录,简单粗暴。</p>\n</li>\n<li><p>进一步配置，通过dockerfile<br>Dockerfile是docker的一个统一配置文件，类似于nginx的nginx.conf，用来配置一个自定义的镜像.<br>我们在本地创建一个Dockerfile文件夹，里面有一个Dockerfile文件.<br><code>mkdir Dockerfile</code>  <code>touch Dockerfile</code><br>然后在/Dockerfile/创建web文件夹，在/Dockerfile/web/创建front文件夹，然后把前端dist拖到/Dockerfile/web/front/。</p>\n</li>\n</ol>\n<p>编辑Dockerfile:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">FROM nginx:latest\nCOPY &#x2F;web&#x2F;front&#x2F;dist &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这两条指令的意思是我们自定义的这个镜像，基于nginx:latest，然后复制本地/web/front/dist文件到容器/usr/share/nginx/html目录</p>\n<p>关于Dockerfile的指令，可参照这篇文章：<a href=\"https://www.runoob.com/docker/docker-dockerfile.html\">https://www.runoob.com/docker/docker-dockerfile.html</a></p>\n<p>之后进入Dockerfile文件夹，开始构建镜像:<br><code>docker build -t web-front:latest .</code> //创建一个名称标签为web-front:latest的镜像</p>\n<p>输入docker images查看镜像<br><img src=\"https://cdn.ldpro.top/docker-nginx2.jpg\" width=\"80%\"></p>\n<p>运行容器<br><code>docker run -itd --name web-front-1 -p 80:80 web-front bash</code></p>\n<p>进入容器<br><code>docker exec -it 容器id bash</code></p>\n<p>运行<code>/usr/sbin/nginx</code>开启nginx服务</p>\n<p>好了，可以访问了~<br><img src=\"https://cdn.ldpro.top/docker-nginx3.jpg\" width=\"100%\"></p>\n<p><em>参考文章：</em></p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6844904022659301383#heading-9\">https://juejin.cn/post/6844904022659301383#heading-9</a></li>\n<li><a href=\"https://juejin.cn/post/6844903591375814669\">https://juejin.cn/post/6844903591375814669</a></li>\n<li><a href=\"https://www.cnblogs.com/saneri/p/11799865.html\">https://www.cnblogs.com/saneri/p/11799865.html</a></li>\n<li><a href=\"https://www.runoob.com/docker/docker-tutorial.html\">https://www.runoob.com/docker/docker-tutorial.html</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":"<p>docker现在作为最热门的部署技术之一，作为一个前端也是有必要学习哒!<br>enmmmmm，不过作为一个前端，加上公司也很少用docker，接触的机会实在太少了，根本没有实操机会啊喂，这两天盲人摸🐘般的搞了点皮毛，写下一点点心得：</p>\n<h3 id=\"什么是docker\"><a href=\"#什么是docker\" class=\"headerlink\" title=\"什么是docker\"></a>什么是docker</h3><p>一套开源的、可以搭建虚拟环境的应用容器引擎。特点是隔离化、容器化。</p>\n<h3 id=\"docker是干啥用的\"><a href=\"#docker是干啥用的\" class=\"headerlink\" title=\"docker是干啥用的\"></a>docker是干啥用的</h3><p>通过docker，可以把本地的运行环境移植到一个镜像中，在服务器端就可以直接用上这套环境来进行部署，省去了不同环境之间的转换和不兼容。<br>所以，从作用上来看，似乎和虚拟机有点像。</p>\n<h3 id=\"docker的优点\"><a href=\"#docker的优点\" class=\"headerlink\" title=\"docker的优点\"></a>docker的优点</h3><p>比虚拟机而言，docker启动迅速，开箱即用；内存占用少</p>\n<h3 id=\"docker的安装\"><a href=\"#docker的安装\" class=\"headerlink\" title=\"docker的安装\"></a>docker的安装</h3><p>安装方法网上一搜一大堆，我的电脑是macOS系统，可以直接用homebrew安装，或者也可以手动去官网下载安装包</p>\n<h3 id=\"docker的核心概念\"><a href=\"#docker的核心概念\" class=\"headerlink\" title=\"docker的核心概念\"></a>docker的核心概念</h3><ol>\n<li>镜像<br>镜像是docker的地基，docker官方也有专门的镜像库，提供容器运行时所需的运行环境；<br>相关命令：<br> <strong><em>列出本地镜像列表</em></strong> <code>docker images</code><br> <strong><em>获取镜像</em></strong> \b<code>docker pull xxx</code><br> <strong><em>查找镜像</em></strong> <code>docker search xxx</code><br> <strong><em>删除镜像</em></strong> <code>docker rmi xxx</code><br> <strong><em>更新/提交镜像</em></strong> <code>docker commit -m=? -a=? 容器id xxx</code></li>\n<li>容器<br>容器是镜像的实例，只有把镜像容器化了才可以在本地使用；<br>相关命令：(xxx代表镜像名)<br> <strong><em>查看运行中容器</em></strong> <code>docker ps</code><br> <strong><em>创建容器</em></strong> <code>docker run [OPTIONS] xxx [COMMAND] </code><br> OPTIONS说明：<br> -d 后台运行容器<br> -i 交互模式运行<br> -t 为容器分配一个伪输入终端<br> -p 指定端口映射，格式<code>主机端口:容器端口</code><br> -P 随机端口映射<br> –name 为容器指定名称<br> -v 绑定卷，一般用于数据传输<br> 上面都是常用的参数，不常用的就不列举了，可以找文档看；此外，-d,-t,-i可以合并写，比如-it,-itd<br>举例：<br>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx<br><code>docker run -d --name mynginx -d nginx:latest</code><br>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。<br><code>docker run -d -p 80:80 -v /data:/data nginx:latest</code></li>\n</ol>\n<p>此外，容器和容器之间也可以进行互联，方法是先建立一个docker网络<br><code>docker network create -d bridge test-net</code><br>之后创建两个或多个容器，用–network test-net来加入该网络</p>\n<ol start=\"3\">\n<li>仓库<br>仓库是集中存放镜像的地方，官方有<a href=\"https://hub.docker.com/\">Docker Hub</a></li>\n</ol>\n<p>那么身为一个前端，部署方面最先要接触的必须是nginx，接下来就以nginx的部署为例</p>\n<p>拉取nginx镜像：<br><code>docker pull nginx:latest</code></p>\n<p>运行一个nginx容器：<br><code>docker run --name nginx-test -p 80:80 -d nginx</code></p>\n<p>运行完后看本地ip能否访问,如成功应该出现’Welcome to nginx!’页面(这里我用的8081端口，因为80端口被占用了)<br><img src=\"https://cdn.ldpro.top/docker-nginx.jpg\" width=\"80%\"></p>\n<p>之后我们进入该容器<br><code>docker exec -it 容器id bash</code></p>\n<p>nginx容器的默认nginx存放地址为/usr/share/nginx/html/index.html，理论上我们直接把前端包放进去就ok了。<br>但是如何把本机文件拷贝到容器里呢？</p>\n<p>两种方法：</p>\n<ol>\n<li><p>通过映射：<br><code>docker run --name nginx-blog -p 80:80 -d -v /Users/lidong/Documents/blog/public:/usr/share/nginx/html nginx:latest</code><br>这里我是直接把本机的前端包映射到容器对应的nginx目录,简单粗暴。</p>\n</li>\n<li><p>进一步配置，通过dockerfile<br>Dockerfile是docker的一个统一配置文件，类似于nginx的nginx.conf，用来配置一个自定义的镜像.<br>我们在本地创建一个Dockerfile文件夹，里面有一个Dockerfile文件.<br><code>mkdir Dockerfile</code>  <code>touch Dockerfile</code><br>然后在/Dockerfile/创建web文件夹，在/Dockerfile/web/创建front文件夹，然后把前端dist拖到/Dockerfile/web/front/。</p>\n</li>\n</ol>\n<p>编辑Dockerfile:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">FROM nginx:latest\nCOPY &#x2F;web&#x2F;front&#x2F;dist &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这两条指令的意思是我们自定义的这个镜像，基于nginx:latest，然后复制本地/web/front/dist文件到容器/usr/share/nginx/html目录</p>\n<p>关于Dockerfile的指令，可参照这篇文章：<a href=\"https://www.runoob.com/docker/docker-dockerfile.html\">https://www.runoob.com/docker/docker-dockerfile.html</a></p>\n<p>之后进入Dockerfile文件夹，开始构建镜像:<br><code>docker build -t web-front:latest .</code> //创建一个名称标签为web-front:latest的镜像</p>\n<p>输入docker images查看镜像<br><img src=\"https://cdn.ldpro.top/docker-nginx2.jpg\" width=\"80%\"></p>\n<p>运行容器<br><code>docker run -itd --name web-front-1 -p 80:80 web-front bash</code></p>\n<p>进入容器<br><code>docker exec -it 容器id bash</code></p>\n<p>运行<code>/usr/sbin/nginx</code>开启nginx服务</p>\n<p>好了，可以访问了~<br><img src=\"https://cdn.ldpro.top/docker-nginx3.jpg\" width=\"100%\"></p>\n<p><em>参考文章：</em></p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6844904022659301383#heading-9\">https://juejin.cn/post/6844904022659301383#heading-9</a></li>\n<li><a href=\"https://juejin.cn/post/6844903591375814669\">https://juejin.cn/post/6844903591375814669</a></li>\n<li><a href=\"https://www.cnblogs.com/saneri/p/11799865.html\">https://www.cnblogs.com/saneri/p/11799865.html</a></li>\n<li><a href=\"https://www.runoob.com/docker/docker-tutorial.html\">https://www.runoob.com/docker/docker-tutorial.html</a></li>\n</ul>\n"},{"title":"demo","_content":"","source":"_drafts/demo.md","raw":"---\ntitle: demo\ntags:\n---\n","slug":"demo","published":0,"date":"2020-09-18T01:25:00.335Z","updated":"2020-09-18T01:25:00.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96nzsgw000tuwx263c6333c","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"该materia主题作者!","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/heson525/pic@master/pic/avatar03.png","name":"黑石博客","introduction":"人生在勤，不索何获","url":"https://www.heson10.com/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/medias/avatar.jpg","name":"张小菜苔","introduction":"道虽迩，不行不至；事虽小，不为不成。","url":"https://zhangxiaocai.cn/","title":"前去学习"},{"avatar":"https://www.wulinzeng.vip/medias/avatar.jpg","name":"WuLiZeng","introduction":"优质博客","url":"https://www.wulinzeng.vip/","title":"前去学习"},{"avatar":"https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp","name":"diygod","introduction":"Dplayer弹幕播放器开源作者","url":"https://diygod.me/","title":"前去观摩"}]}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cl96nzsg90001uwx2eenc6occ","category_id":"cl96nzsge0004uwx2d2eddux1","_id":"cl96nzsgn000iuwx2csvjeh22"},{"post_id":"cl96nzsgm000guwx288h0ejbn","category_id":"cl96nzsgk000cuwx2a5q0fi0n","_id":"cl96nzsgu000nuwx22581dxgx"},{"post_id":"cl96nzsgd0003uwx27tzmaqaj","category_id":"cl96nzsgk000cuwx2a5q0fi0n","_id":"cl96nzsgv000ruwx27as7ex97"},{"post_id":"cl96nzsgn000huwx20c127011","category_id":"cl96nzsgk000cuwx2a5q0fi0n","_id":"cl96nzsgw000uuwx22mmrcoqg"},{"post_id":"cl96nzsgp000luwx2h6zrhs2v","category_id":"cl96nzsge0004uwx2d2eddux1","_id":"cl96nzsgx000yuwx2hk006zdh"},{"post_id":"cl96nzsgh0007uwx26ylu8fqi","category_id":"cl96nzsge0004uwx2d2eddux1","_id":"cl96nzsgx0010uwx2dthf0o92"},{"post_id":"cl96nzsgt000muwx22scvhtc6","category_id":"cl96nzsgk000cuwx2a5q0fi0n","_id":"cl96nzsgy0011uwx2ci0ib6a3"},{"post_id":"cl96nzsgv000quwx2a9bfcgjs","category_id":"cl96nzsgk000cuwx2a5q0fi0n","_id":"cl96nzsgy0013uwx2dvxbay4x"},{"post_id":"cl96nzsgj0009uwx27dfh321h","category_id":"cl96nzsgk000cuwx2a5q0fi0n","_id":"cl96nzsgy0014uwx2cqkbbp0w"},{"post_id":"cl96nzsgk000buwx2akvl49fi","category_id":"cl96nzsgk000cuwx2a5q0fi0n","_id":"cl96nzsgy0016uwx29zdmhk9p"}],"PostTag":[{"post_id":"cl96nzsg90001uwx2eenc6occ","tag_id":"cl96nzsgg0005uwx24zxa5ybj","_id":"cl96nzsgl000euwx2hick7mk0"},{"post_id":"cl96nzsgd0003uwx27tzmaqaj","tag_id":"cl96nzsgl000duwx2gecibfow","_id":"cl96nzsgw000suwx22t7s9pis"},{"post_id":"cl96nzsgd0003uwx27tzmaqaj","tag_id":"cl96nzsgo000kuwx23wxoankj","_id":"cl96nzsgw000wuwx25x8ufgdi"},{"post_id":"cl96nzsgt000muwx22scvhtc6","tag_id":"cl96nzsgo000kuwx23wxoankj","_id":"cl96nzsgx000zuwx2ak4k09q6"},{"post_id":"cl96nzsgh0007uwx26ylu8fqi","tag_id":"cl96nzsgu000puwx2bb5x8j5m","_id":"cl96nzsgy0017uwx2cg4tat8q"},{"post_id":"cl96nzsgh0007uwx26ylu8fqi","tag_id":"cl96nzsgx000xuwx25y334lx4","_id":"cl96nzsgy0018uwx24p04a2l3"},{"post_id":"cl96nzsgh0007uwx26ylu8fqi","tag_id":"cl96nzsgy0012uwx2an4n1r2l","_id":"cl96nzsgz001auwx214xugg9b"},{"post_id":"cl96nzsgj0009uwx27dfh321h","tag_id":"cl96nzsgy0015uwx257j4eex4","_id":"cl96nzsgz001cuwx2dv88ggw8"},{"post_id":"cl96nzsgj0009uwx27dfh321h","tag_id":"cl96nzsgy0019uwx2g6416464","_id":"cl96nzsgz001duwx2bpg91fb7"},{"post_id":"cl96nzsgk000buwx2akvl49fi","tag_id":"cl96nzsgz001buwx2f8nwhfa9","_id":"cl96nzsh0001guwx26ty918wf"},{"post_id":"cl96nzsgk000buwx2akvl49fi","tag_id":"cl96nzsgz001euwx22n93dxlb","_id":"cl96nzsh0001huwx27cyhhsc1"},{"post_id":"cl96nzsgm000guwx288h0ejbn","tag_id":"cl96nzsgz001fuwx20wdh38y4","_id":"cl96nzsh0001juwx28gfnbptx"},{"post_id":"cl96nzsgn000huwx20c127011","tag_id":"cl96nzsh0001iuwx2fl9w9zay","_id":"cl96nzsh0001luwx28xpvh73e"},{"post_id":"cl96nzsgp000luwx2h6zrhs2v","tag_id":"cl96nzsh0001kuwx29pceai9t","_id":"cl96nzsh1001ouwx2elkc6p05"},{"post_id":"cl96nzsgp000luwx2h6zrhs2v","tag_id":"cl96nzsh0001muwx2gc3j0beg","_id":"cl96nzsh1001puwx2fa9vf94a"},{"post_id":"cl96nzsgv000quwx2a9bfcgjs","tag_id":"cl96nzsh0001nuwx27r5f0bh0","_id":"cl96nzsh1001quwx2386n1hax"}],"Tag":[{"name":"博客","_id":"cl96nzsgg0005uwx24zxa5ybj"},{"name":"React","_id":"cl96nzsgl000duwx2gecibfow"},{"name":"性能优化","_id":"cl96nzsgo000kuwx23wxoankj"},{"name":"游戏","_id":"cl96nzsgu000puwx2bb5x8j5m"},{"name":"国产3A大作","_id":"cl96nzsgx000xuwx25y334lx4"},{"name":"单机","_id":"cl96nzsgy0012uwx2an4n1r2l"},{"name":"前端部署","_id":"cl96nzsgy0015uwx257j4eex4"},{"name":"部署","_id":"cl96nzsgy0019uwx2g6416464"},{"name":"ES6","_id":"cl96nzsgz001buwx2f8nwhfa9"},{"name":"Set/Map","_id":"cl96nzsgz001euwx22n93dxlb"},{"name":"单位","_id":"cl96nzsgz001fuwx20wdh38y4"},{"name":"布局","_id":"cl96nzsh0001iuwx2fl9w9zay"},{"name":"音乐","_id":"cl96nzsh0001kuwx29pceai9t"},{"name":"尤克里里","_id":"cl96nzsh0001muwx2gc3j0beg"},{"name":"docker","_id":"cl96nzsh0001nuwx27r5f0bh0"}]}}
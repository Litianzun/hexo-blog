<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>改变</title>
      <link href="2020/10/15/%E6%94%B9%E5%8F%98/"/>
      <url>2020/10/15/%E6%94%B9%E5%8F%98/</url>
      
        <content type="html"><![CDATA[<p>换过工作后，生活作息相比之前更不规律了，熬夜几乎是家常便饭，人也越来越懒散，这是值得思考的事情，来一点改变：</p><h3 id="熬夜"><a href="#熬夜" class="headerlink" title="熬夜"></a>熬夜</h3><p>这个老大难了，也是目前最严峻的问题，现在很多时候工作日只能睡6h左右，中午午休补觉还是效果太差。</p><ol><li>卸载B站<br>虽然很喜欢B站，但是现在确实在上面花费了太多太多时间，当机立断吧！</li><li>睡觉时间12:00，起床时间7:30(周末一样)</li><li>那晚上干啥？<br>目前的计划是学半个小时尤克里里，跟着迷鹿尤克里里学吧，之后看美剧，其他啥都不看。之前看b站就是，本来想着看部电影睡觉，结果先去看直播，然后看短视频，最后再去看电影特么一个多小时都过去了。。</li></ol><h3 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h3><p>太麻烦的就不考虑了，现在考虑如下：</p><ol><li>早饭：2个煎蛋+1片面包+部分蔬菜（蔬菜包）+1杯牛奶 / 1碗燕麦+水果（随意）+<br>为啥煎蛋？因为比水煮蛋好吃，吃完很精神；为啥是1片面包？因为中午吃的早，碳水少摄入一点，不会觉得很饱；</li><li>午饭：公司点外卖</li><li>晚饭：外面吃<br>如果节假日有时间做饭，没太多要求，随便做吧</li></ol><h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>现在每周运动量平均下来不到2小时。。因为现在不准备去健身房了，家里运动场地器械有限，得重新规划一套方案：<br>考虑到周三，周五早到家</p><ol><li>周三，周六晚上去跑步</li><li>周五，周日安排健身活动（健身或游泳）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端部署个人小记</title>
      <link href="2020/10/12/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%B0%8F%E8%AE%B0/"/>
      <url>2020/10/12/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><em>声明：前端部署网上搜索有不少的文章，但是这里列举的是我自己目前用的一些手段，绝对是亲身实践过的</em></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这里的部署主要分两块：前端和后端；前端指的是我们打出来的dist包，后端指的是一些后端服务，既然这里说的是前端部署，那必须得是node服务了，这个服务部署好之后我们就可以访问它的api了；这样，一个前后端分离的项目就成功部署好了，这里我依据的是我自己部署好的项目：<a href="http://175.24.123.231:8081/">网易云音乐</a>，下面我详细说明</p><h3 id="部署前的准备"><a href="#部署前的准备" class="headerlink" title="部署前的准备"></a>部署前的准备</h3><p>那肯定是需要一台服务器，域名的话，有需求就买一个吧，暂时不需要的话像我一样用ip地址访问其实问题也不大，就是丑一点😂<br>我这里用到的服务器是腾讯云购买的centOS云服务器，然后用的是学生体验套餐，10元/月，我续了一年，目前也够用了；<br><img src="http://cdn.ldpro.top/p1.png" width= 360 /><br>选择服务器时需要注意：一个是操作系统，一个是选择地区；操作系统建议linux，也就是这里选择unbuntu或者centOS，我用的是centOS，地区的话选择离自己最近的地区，速度相应的也会快些<br><img src="http://cdn.ldpro.top/p2.png" width= 360 /><br>买好之后，腾讯云会发送一封站内信，里面有云服务器的登录密码，之后进入云服务器-实例，找到自己刚刚购买的服务器，点击登录<br>登录的话分好几种方式，这里我列举我本人觉得最好用的一种：ssh登录<br><img src="http://cdn.ldpro.top/p3.png" width= 360 /><br>按图示登录之后，我们就可以通过终端来控制云服务器了，首先我们搭建必要的环境：<br>（这里要插一句，如果你不想之后一直用命令行的话，还是装个宝塔面板吧，不然之后上传文件啥的会很烦，这都是本人的血泪史啊～，注意宝塔面板必须在这个阶段装，如果后面安装了nginx啥的就不可以装宝塔面板了）<br>那么我们需要安装git+node，linux环境安装git很简单：<code>yum -y install git</code>，安装node的话，本人用的是重新设置镜像，但是发现node版本不是最新的，这里建议大家跟着网上教程来吧：<a href="https://www.jianshu.com/p/cb29ceb08a2c">https://www.jianshu.com/p/cb29ceb08a2c</a>，这两个装好后，基本的环境就搭建好了</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>对于前端部署而言，后端服务很容易部署，这里需要用到的是pm2以及一个完整的node项目，node项目直接从git拉取，拉下来之后找到对应的启动文件，比如你的启动文件是app.js，正常启动需要运行<code>node app.js</code>，理论上来说，当运行了这个脚本后，就已经可以了，但是不久后你会惊奇的发现，10分钟不到，这个服务莫名其妙的关闭了！没错，这个时候，pm2就来了～<br>pm2是一个node进程管理工具，你可以用它来管理你的node进程，并查看node进程的状态，以及性能监控，负载均衡等。。。<br>pm2小册子：<a href="https://juejin.im/post/6844903710037016584">pm2简易使用手册</a><br>接下来，运行这条命令：<code>pm2 start ./xxx.js</code>，（xxx.js是你的node启动文件），然后你就可以通过<code>pm2 list</code>来查看进程啦～<br>服务跑好之后，测试接口是否可以访问：服务器公网ip+node服务的端口号</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>这里仅记录我自己使用的方式：Linux 系统通过 FTP 上传文件到云服务器；参考文档：<a href="https://cloud.tencent.com/document/product/213/42501">https://cloud.tencent.com/document/product/213/42501</a><br>ftp上传之前，需要确保服务器已经搭建好ftp服务<a href="https://cloud.tencent.com/document/product/213/10912">https://cloud.tencent.com/document/product/213/10912</a><br>照着上面的文档撸就完事了，文件上传好之后，记录下文件在服务器中的位置，这个之后有用；<br>接下来就是配置nginx了，我们通过它的代理功能来让用户可以访问我们的web；<br>linux下安装nginx: <a href="https://www.cnblogs.com/xxoome/p/5866475.html">https://www.cnblogs.com/xxoome/p/5866475.html</a><br>nginx安装好后，修改它的配置文件：nginx.conf，下面是我自己的配置文件：<br><em>这台服务器我部署了四个项目，8081，8082，8083，和80默认端口</em></p><pre class="line-numbers language-nginx.conf" data-language="nginx.conf"><code class="language-nginx.conf"># For more information on configuration, see:#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;# user nginx;  user root;worker_processes auto;error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;pid &#x2F;run&#x2F;nginx.pid;# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.# include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;events &#123;    worker_connections 1024;&#125;http &#123;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 2048;    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;    default_type        application&#x2F;octet-stream;    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include    # for more information.    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;    server &#123;        listen 8081;        server_name localhost1;        root &#x2F;etc&#x2F;nginx&#x2F;wycloud;        charset &#39;utf-8&#39;;        location &#x2F; &#123;        root &#x2F;etc&#x2F;nginx&#x2F;wycloud;        index index.html;        try_files $uri $uri&#x2F; &#x2F;index.html;&#125;location ~.*\.(gif|jpg|jpeg|png|bmp|swf|eot|css|svg|ttf|woff|woff2|properties|json)?$ &#123; access_log off;            root &#x2F;etc&#x2F;nginx&#x2F;wycloud;            expires 30d;            break;        &#125;&#125;    server &#123;        listen       8082;       #listen       [::]:80 default_server;        server_name  localhost2;        root         &#x2F;etc&#x2F;nginx&#x2F;html;        charset &#39;utf-8&#39;;        # Load configuration files for the default server block.        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;        location &#x2F; &#123;root &#x2F;etc&#x2F;nginx&#x2F;html;index index.html;try_files $uri $uri&#x2F; &#x2F;index.html;        &#125; location ~.*\.(gif|jpg|jpeg|png|bmp|swf|eot|svg|ttf|woff|woff2|properties|json)?$ &#123; access_log off;            root &#x2F;etc&#x2F;nginx&#x2F;html;            expires 30d;            break;        &#125;        error_page 404 &#x2F;404.html;            location &#x3D; &#x2F;40x.html &#123;        &#125;        error_page 500 502 503 504 &#x2F;50x.html;            location &#x3D; &#x2F;50x.html &#123;        &#125;    &#125;server &#123;    listen 80;    listen [::]:80;    root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;blog;    server_name lidongss;    location &#x2F; &#123;            # First attempt to serve request as file, then            # as directory, then fall back to displaying a 404.            try_files $uri $uri&#x2F; &#x3D;404;    &#125;   location &#x2F;navigator&#x2F; &#123;        return 302 http:&#x2F;&#x2F;175.24.123.231:8083&#x2F;;        &#125;&#125;server &#123;        listen 8083;        server_name webstack;        charset &#39;utf-8&#39;;        location &#x2F; &#123;        root &#x2F;etc&#x2F;nginx&#x2F;webstack;        index index.html;        try_files $uri $uri&#x2F; &#x2F;index.html;&#125;&#125;# Settings for a TLS enabled server.##    server &#123;#        listen       443 ssl http2 default_server;#        listen       [::]:443 ssl http2 default_server;#        server_name  _;#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;##        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;#        ssl_session_cache shared:SSL:1m;#        ssl_session_timeout  10m;#        ssl_ciphers HIGH:!aNULL:!MD5;#        ssl_prefer_server_ciphers on;##        # Load configuration files for the default server block.#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;##        location &#x2F; &#123;#        &#125;##        error_page 404 &#x2F;404.html;#            location &#x3D; &#x2F;40x.html &#123;#        &#125;##        error_page 500 502 503 504 &#x2F;50x.html;#            location &#x3D; &#x2F;50x.html &#123;#        &#125;#    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx的相关知识还是要稍微学习一下的，对于我们前端部署项目来说，学会基本的代理方法就可以了</p><p>之后每次要更新前端项目的话，<code>cd /xxx</code>进入对应的资源文件夹，执行<code>mdelete *</code>，删除原来所有的包，然后再执行<code>lcd /xx</code>进入你本地的项目文件夹，执行<code>mput *</code>批量上传文件</p><p><em>tip: nginx的坑很多，零基础搞这东西就和盲人摸象一样，差点没把我搞死。。</em><br>下面列举一些我个人常用的命令：</p><ul><li>nginx重启：<code>nginx -s reload</code></li><li>列举当前开放的服务：<code>netstat -ntlp</code></li><li>启动nginx：<code>nginx -c /etc/nginx/nginx.conf</code><br>上传资源的时候，如果是文件夹，会提示权限不够：</li><li>开权限：<code>chown -R ftpuser:ftpuser /var/ftp/test</code>(后面的路径换为文件夹的地址)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端部署 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑神话:悟空</title>
      <link href="2020/09/30/%E9%BB%91%E7%A5%9E%E8%AF%9D-%E6%82%9F%E7%A9%BA/"/>
      <url>2020/09/30/%E9%BB%91%E7%A5%9E%E8%AF%9D-%E6%82%9F%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>我TM吹爆!!!</strong><br>在国内低质量手游网游遍地走的大环境下，截止目前，几乎没有什么拿的出手的3A单机游戏，对于一个游戏爱好者来说，惜哉痛哉！<br>而现在，一款大作正在孕育而生！</p><h3 id="游戏截图"><a href="#游戏截图" class="headerlink" title="游戏截图"></a>游戏截图</h3><img src="http://cdn.ldpro.top/wukong.jpeg" width="100%" /><p>《黑神话：悟空》的开发商为游戏科学公司，《战争艺术：赤潮》就是他们开发的手游，也是他们现在主要的收入来源；一个小规模团队可以做出这样的产品，证明他们是有实力和梦想的，也希望他们可以成为国内单机游戏的先驱者，我对这款游戏表示支持!</p><h3 id="宣传视频"><a href="#宣传视频" class="headerlink" title="宣传视频"></a>宣传视频</h3><p><video controls width="100%" src="http://www.heishenhua.com/video/b1/gamesci_wukong.mp4"></video></p><hr><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>游戏官网：<a href="http://www.heishenhua.com/">《黑神话：悟空》</a><br>看了宣传视频后，真的好想玩！不知道我的1660s带不带的动😂</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 国产3A大作 </tag>
            
            <tag> 单机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React性能优化的几种方式</title>
      <link href="2020/09/22/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2020/09/22/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>React的性能优化大都是交由用户自己来做的，主要体现在减少不必要的渲染，减少不必要的js计算，从而达到性能优化的目的</p><h3 id="class组件"><a href="#class组件" class="headerlink" title="class组件"></a>class组件</h3><ol><li><p><strong>PureComponent</strong><br>优点：使用方便； 缺点：仅做浅层比较，对于复杂数据结构无法正确识别</p></li><li><p><strong>shouldComponentUpdate</strong><br>这个大家都知道，也是最常用的，前提是不可以用PureComponent<br>使用方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token operator">=></span> boolean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color=red size=2> *不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能；现在React正逐步减少shouldComponentUpdate的重要性 </font></p></li></ol><h3 id="function组件"><a href="#function组件" class="headerlink" title="function组件"></a>function组件</h3><ol><li><strong>React.memo</strong><br>可以这么理解，React.memo = PureComponent + shouldComponentUpdate；因为它也是做浅层对比，也和should一样有具体的手动控制方法<br>不过memo的原理是记忆缓存上一次的渲染结果，而should是直接跳过更新<br>使用方法：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 使用 props 渲染 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color=red size=2>*注意后面的回调函数返回结果和should是相反的</font></p><ol start="2"><li><strong>React.useMemo(Hooks)</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>React官方定义：<blockquote><p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。<br>通俗易懂的解释下：该方法接收两个参数，第一个是一个函数，返回一个值，第二个是他的依赖项，只有当依赖项里的值发生变化了，前面那个函数才会重新计算，否则不会重新计算，套用上次缓存下来的值，避免无用的js计算。</p></blockquote></li></ol><p><em>特地去搭了个服务演示一下，下面是我的代码:</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> setStr<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"yeah"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"重新计算了嗷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token string">"~~"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// const memoValue = React.useMemo(value,[str])</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>在线调试页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变num<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setStr</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变str<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是没有用memo的情况，value的结果完全是跟着str走的，按理说我们想看到的是点击第一个按钮不触发重新计算，但是它计算了，因为React的机制，页面的state改变了，就会重新渲染，那么return里的代码会重新走一遍；<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/3f478f113119cd7a.jpg' width=360 /><br>上图是我分别点击了两个按钮之后触发的console，接下来试试useMemo</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> setStr<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"yeah"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"重新计算了嗷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token string">"~~"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> memoValue <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useMemo</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>在线调试页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span>memoValue<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变num<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setStr</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变str<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次点击两个按钮:<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/0664e7ce9c69d8ed.jpg' width=360 /><br>显然，虽然页面重新渲染了，但是value没有重新计算了，是不是很神奇～<br>例子只是很简单的一个展示，当计算开销大的时候，比如有多次循环或者递归啥的，这性能优化可就明显了</p><ol start="3"><li><strong>React.useCallback</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>和useMemo没什么差别，区别是返回的是一个回调函数，memo返回的是值</li></ol><p>目前想到的就是这些，也是比较常用的，后续有其他的想法会继续更新～</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客介绍</title>
      <link href="2020/09/21/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/09/21/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>hexo搭建的一个博客，部署在自己的服务器上，接下来可能会买一个域名</p><p>搭博客的目的不为别的，就是闲的。没事的时候我会在上面写一些文章，可能是生活上的琐事，或者是一些技术类文章，或者一些音乐，电影，美剧啥的，甚至可能是一些天马行空的想法。。</p><p>其实很早就有搞一个博客的想法了，程序员也不是非得搞什么技术博客，博客首先就是一个记录分享的平台，也是自己的一个小家。在中国如今人人都是社畜的时代，与其拼搏一辈子为了一个火柴盒，倒不如把自己这个虚拟的小家好好修缮一下，也算是一种心灵的寄托～，嗯–自己把自己都说动了&gt;&lt;</p><p>总之，更新随缘，大家也就看看图一乐吧</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本语法介绍</title>
      <link href="2020/09/18/markdown%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/09/18/markdown%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><hr><p>这里是一大段文字，主要是文章的主内容<br>普通换行是两个空格+回车;</p><p>直接回车也能换行<br><em>斜体</em> <strong>粗体</strong> <strong><em>又粗又斜</em></strong></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>列表嵌套</p><ol><li>i<ul><li>三到四个空格</li><li>三到四个空格</li></ul></li><li>ii<ul><li>四个空格</li><li>四个空格</li></ul></li></ol><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>区块把它想象成一个带样式的div标签吧，列表可以放区块里，区块也能放列表里，体现在html上是”blockquote”块引用标签</p><blockquote><p>区块来了</p></blockquote><blockquote><p>大<br>区<br>块</p></blockquote><blockquote><p>区块套娃</p><blockquote><p>1</p><blockquote><p>2</p></blockquote></blockquote></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>printf()</code>函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片就直接用img标签吧，还可以调大小<br><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"></p><p>在这里贴个自己项目的链接：<a href="http://175.24.123.231:8081/">网易云音乐</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

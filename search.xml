<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dockerの小试牛刀</title>
      <link href="/2021/10/15/docker%E3%81%AE%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/"/>
      <url>/2021/10/15/docker%E3%81%AE%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</url>
      
        <content type="html"><![CDATA[<p>docker现在作为最热门的部署技术之一，作为一个前端也是有必要学习哒!<br>enmmmmm，不过作为一个前端，加上公司也很少用docker，接触的机会实在太少了，根本没有实操机会啊喂，这两天盲人摸🐘般的搞了点皮毛，写下一点点心得：</p><h3 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h3><p>一套开源的、可以搭建虚拟环境的应用容器引擎。特点是隔离化、容器化。</p><h3 id="docker是干啥用的"><a href="#docker是干啥用的" class="headerlink" title="docker是干啥用的"></a>docker是干啥用的</h3><p>通过docker，可以把本地的运行环境移植到一个镜像中，在服务器端就可以直接用上这套环境来进行部署，省去了不同环境之间的转换和不兼容。<br>所以，从作用上来看，似乎和虚拟机有点像。</p><h3 id="docker的优点"><a href="#docker的优点" class="headerlink" title="docker的优点"></a>docker的优点</h3><p>比虚拟机而言，docker启动迅速，开箱即用；内存占用少</p><h3 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h3><p>安装方法网上一搜一大堆，我的电脑是macOS系统，可以直接用homebrew安装，或者也可以手动去官网下载安装包</p><h3 id="docker的核心概念"><a href="#docker的核心概念" class="headerlink" title="docker的核心概念"></a>docker的核心概念</h3><ol><li>镜像<br>镜像是docker的地基，docker官方也有专门的镜像库，提供容器运行时所需的运行环境；<br>相关命令：<br> <strong><em>列出本地镜像列表</em></strong> <code>docker images</code><br> <strong><em>获取镜像</em></strong> <code>docker pull xxx</code><br> <strong><em>查找镜像</em></strong> <code>docker search xxx</code><br> <strong><em>删除镜像</em></strong> <code>docker rmi xxx</code><br> <strong><em>更新/提交镜像</em></strong> <code>docker commit -m=? -a=? 容器id xxx</code></li><li>容器<br>容器是镜像的实例，只有把镜像容器化了才可以在本地使用；<br>相关命令：(xxx代表镜像名)<br> <strong><em>查看运行中容器</em></strong> <code>docker ps</code><br> <strong><em>创建容器</em></strong> <code>docker run [OPTIONS] xxx [COMMAND] </code><br> OPTIONS说明：<br> -d 后台运行容器<br> -i 交互模式运行<br> -t 为容器分配一个伪输入终端<br> -p 指定端口映射，格式<code>主机端口:容器端口</code><br> -P 随机端口映射<br> –name 为容器指定名称<br> -v 绑定卷，一般用于数据传输<br> 上面都是常用的参数，不常用的就不列举了，可以找文档看；此外，-d,-t,-i可以合并写，比如-it,-itd<br>举例：<br>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx<br><code>docker run -d --name mynginx -d nginx:latest</code><br>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。<br><code>docker run -d -p 80:80 -v /data:/data nginx:latest</code></li></ol><p>此外，容器和容器之间也可以进行互联，方法是先建立一个docker网络<br><code>docker network create -d bridge test-net</code><br>之后创建两个或多个容器，用–network test-net来加入该网络</p><ol start="3"><li>仓库<br>仓库是集中存放镜像的地方，官方有<a href="https://hub.docker.com/">Docker Hub</a></li></ol><p>那么身为一个前端，部署方面最先要接触的必须是nginx，接下来就以nginx的部署为例</p><p>拉取nginx镜像：<br><code>docker pull nginx:latest</code></p><p>运行一个nginx容器：<br><code>docker run --name nginx-test -p 80:80 -d nginx</code></p><p>运行完后看本地ip能否访问,如成功应该出现’Welcome to nginx!’页面(这里我用的8081端口，因为80端口被占用了)<br><img src="https://cdn.ldpro.top/docker-nginx.jpg" width="80%"></p><p>之后我们进入该容器<br><code>docker exec -it 容器id bash</code></p><p>nginx容器的默认nginx存放地址为/usr/share/nginx/html/index.html，理论上我们直接把前端包放进去就ok了。<br>但是如何把本机文件拷贝到容器里呢？</p><p>两种方法：</p><ol><li><p>通过映射：<br><code>docker run --name nginx-blog -p 80:80 -d -v /Users/lidong/Documents/blog/public:/usr/share/nginx/html nginx:latest</code><br>这里我是直接把本机的前端包映射到容器对应的nginx目录,简单粗暴。</p></li><li><p>进一步配置，通过dockerfile<br>Dockerfile是docker的一个统一配置文件，类似于nginx的nginx.conf，用来配置一个自定义的镜像.<br>我们在本地创建一个Dockerfile文件夹，里面有一个Dockerfile文件.<br><code>mkdir Dockerfile</code>  <code>touch Dockerfile</code><br>然后在/Dockerfile/创建web文件夹，在/Dockerfile/web/创建front文件夹，然后把前端dist拖到/Dockerfile/web/front/。</p></li></ol><p>编辑Dockerfile:</p><pre class="line-numbers language-none"><code class="language-none">FROM nginx:latestCOPY &#x2F;web&#x2F;front&#x2F;dist &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两条指令的意思是我们自定义的这个镜像，基于nginx:latest，然后复制本地/web/front/dist文件到容器/usr/share/nginx/html目录</p><p>关于Dockerfile的指令，可参照这篇文章：<a href="https://www.runoob.com/docker/docker-dockerfile.html">https://www.runoob.com/docker/docker-dockerfile.html</a></p><p>之后进入Dockerfile文件夹，开始构建镜像:<br><code>docker build -t web-front:latest .</code> //创建一个名称标签为web-front:latest的镜像</p><p>输入docker images查看镜像<br><img src="https://cdn.ldpro.top/docker-nginx2.jpg" width="80%"></p><p>运行容器<br><code>docker run -itd --name web-front-1 -p 80:80 web-front bash</code></p><p>进入容器<br><code>docker exec -it 容器id bash</code></p><p>运行<code>/usr/sbin/nginx</code>开启nginx服务</p><p>好了，可以访问了~<br><img src="https://cdn.ldpro.top/docker-nginx3.jpg" width="100%"></p><p><em>参考文章：</em></p><ul><li><a href="https://juejin.cn/post/6844904022659301383#heading-9">https://juejin.cn/post/6844904022659301383#heading-9</a></li><li><a href="https://juejin.cn/post/6844903591375814669">https://juejin.cn/post/6844903591375814669</a></li><li><a href="https://www.cnblogs.com/saneri/p/11799865.html">https://www.cnblogs.com/saneri/p/11799865.html</a></li><li><a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于防抖、节流</title>
      <link href="/2021/05/31/%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81/"/>
      <url>/2021/05/31/%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>防抖，节流是前端业务中经常用到的一种优化手段，能极大的节省内存开销和前后端交互次数<br>我本人防抖用过几次，节流倒是没接触过，于是特地研究了一下，发现这两者其实大同小异；</p><p>防抖就是设定一个延迟，在这个延迟时间内如果多次调用，只执行最后一次调用<br>节流就是设定一个最大时间，在这个时间内管你调用多少次，也只会调用一次，通俗的讲就是采用固定频率</p><p>所以这两个本质上没区别，都是为了在多次快速频繁调用时，只调用一次。<br>不过一个是取最后一次调用，一个是取第一次调用的结果（反正我个人理解是这样😂）</p><p>正常业务中，为了适应快速开发，防抖和节流不用自己写，一般用lodash的 <strong><em>debounce</em></strong> 和 <strong><em>throttle</em></strong></p><p>自己手写的话，可以参考如下代码：</p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">var</span> init1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//初始化timer，作为计时清除依据</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>view1<span class="token punctuation">,</span> setView1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        init1<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">setView1</span><span class="token punctuation">(</span>init1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token number">1000</span><span class="token punctuation">,</span>      <span class="token boolean">false</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h2<span class="token operator">></span>防抖<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick1<span class="token punctuation">&#125;</span><span class="token operator">></span>        click      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"display"</span> style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> height<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span>view1<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 防反跳。fn函数在最后一次调用时刻的delay毫秒之后执行！ * @param fn 执行函数 * @param delay 时间间隔 * @param isImmediate 为true，debounce会在delay时间间隔的开始时立即调用这个函数 * @returns &#123;Function&#125; */</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> isImmediate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//获取函数所在作用域this</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span> <span class="token comment">//取得传入参数</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isImmediate <span class="token operator">&amp;&amp;</span> timer1 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//时间间隔外立即执行</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">var</span> init2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> timeStamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>view2<span class="token punctuation">,</span> setView2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      init2<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token function">setView2</span><span class="token punctuation">(</span>init2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h2<span class="token operator">></span>节流<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick2<span class="token punctuation">&#125;</span><span class="token operator">></span>        click      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"display"</span> style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> height<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span>view2<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//获取函数所在作用域this</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span> <span class="token comment">//取得传入参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timeStamp <span class="token operator">></span> delay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      timeStamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      timer2 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="React-自定义Hooks-写法"><a href="#React-自定义Hooks-写法" class="headerlink" title="React 自定义Hooks 写法"></a>React 自定义Hooks 写法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">useDebounce</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">300</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>debouncedValue<span class="token punctuation">,</span> setDebouncedValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setDebouncedValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> delay<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> debouncedValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> useDebounce<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果可查看该视频：<br><video controls width='100%' src='https://cdn.ldpro.top/fd-screen.mov' /></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐小馆</title>
      <link href="/2021/04/15/%E9%9F%B3%E4%B9%90%E5%B0%8F%E9%A6%86/"/>
      <url>/2021/04/15/%E9%9F%B3%E4%B9%90%E5%B0%8F%E9%A6%86/</url>
      
        <content type="html"><![CDATA[<p>在这篇文章里，记录我的尤克里里学习之路，学会的曲子会录成视频上传，留作纪念～</p><h3 id="学会的第一首弹唱曲：《情非得已》"><a href="#学会的第一首弹唱曲：《情非得已》" class="headerlink" title="学会的第一首弹唱曲：《情非得已》"></a>学会的第一首弹唱曲：《情非得已》</h3><p><video controls width='100%' src='https://cdn.ldpro.top/music1.mp4'></video></p><h3 id="双音：《夏威夷小曲子》"><a href="#双音：《夏威夷小曲子》" class="headerlink" title="双音：《夏威夷小曲子》"></a>双音：《夏威夷小曲子》</h3><p><video controls width="60%" src='https://cdn.ldpro.top/music2.mp4'></video></p><h3 id="指弹曲：《虫儿飞》"><a href="#指弹曲：《虫儿飞》" class="headerlink" title="指弹曲：《虫儿飞》"></a>指弹曲：《虫儿飞》</h3><p><video controls width="100%" src='https://cdn.ldpro.top/music3.mp4'></video></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
            <tag> 尤克里里 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常用布局</title>
      <link href="/2021/03/12/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80/"/>
      <url>/2021/03/12/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>最近发现了 css Layout 这个网站：<a href="https://csslayout.io/">https://csslayout.io/</a><br>于是突发奇想，用纯 css 写几个常用布局看看，目前列举了以下四种：</p><p>效果可查看该视频：<br><video controls width='100%' src='https://cdn.ldpro.top/layout-screen.mov' /></p><h3 id="单行等宽布局"><a href="#单行等宽布局" class="headerlink" title="单行等宽布局"></a>单行等宽布局</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>h2<span class="token operator">></span>单行等宽布局<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'single-row-container'</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'single-row-container-item'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.single-row-container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #00b8ff<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.single-row-container-item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行等宽布局"><a href="#多行等宽布局" class="headerlink" title="多行等宽布局"></a>多行等宽布局</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>h2<span class="token operator">></span>多行等宽布局<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'multiple-row-container'</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'multiple-row-container-item-box'</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'multiple-row-container-item'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.multiple-row-container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #00b8ff<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">padding-right</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.multiple-row-container-item-box</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 25%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.multiple-row-container-item</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="粘性布局"><a href="#粘性布局" class="headerlink" title="粘性布局"></a>粘性布局</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>h2<span class="token operator">></span>粘性布局<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'sticky-container'</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'sticky-container-item'</span><span class="token operator">></span>元素<span class="token punctuation">&#123;</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.sticky-container</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #00b8ff<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.sticky-container-item</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>h2<span class="token operator">></span>圣杯<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'holy-grail-container'</span><span class="token operator">></span>    <span class="token operator">&lt;</span>header<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span>main className<span class="token operator">=</span><span class="token string">'holy-grail-container-main'</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aside<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aside<span class="token operator">></span>        <span class="token operator">&lt;</span>article<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">></span>        <span class="token operator">&lt;</span>nav<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>nav<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>    <span class="token operator">&lt;</span>footer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.holy-grail-container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #00b8ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.holy-grail-container-main</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid #eee<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #eee<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.holy-grail-container-main > aside</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> 1px solid #eee<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.holy-grail-container-main > article</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.holy-grail-container-main > nav</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> 1px solid #eee<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.holy-grail-container > header,footer</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 88px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常用单位介绍</title>
      <link href="/2020/11/20/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%8D%95%E4%BD%8D%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/11/20/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%8D%95%E4%BD%8D%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>本文记录一下前端的常用单位，分别为：px、em、rem、vw(vh)</p><h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>px是大家最耳熟能详的，也叫像素，很多人可能以为它是一个绝对单位，实际上它是一个相对单位，相对于屏幕分辨率而言<br>简单来说，分辨率和屏幕尺寸没有什么关系，作为一个前端来说，需要将注意力更多放在分辨率上，因为1px在分辨率不同的电脑上，显示的大小是不同的；<br>常用分辨率：</p><ul><li>720p：1280*720，高清（HD）</li><li>1080p：1920*1080，超清</li><li>1440p：2560*1440，2k（QHD）</li><li>2160p：3840*2160，4k（一般显示器极限）</li><li>4320p：7680*4320，8k</li></ul><p><strong><em>分辨率越大，1px实际尺寸越小，屏幕越清晰</em></strong><br>很简单的道理，相同尺寸的屏幕比如500mm，一个720p，一个1080p；那么1个像素点的尺寸=500/1280=0.39mm，500/1920=0.26mm；所以分辨率越高，1px越小；<br>而且由这个计算公式可知：尺寸越大，像素点也越大，画面反而不精细了，这就和我们看微信头像，缩略图看着好清晰，放大之后看模糊的一塌糊涂，就是这个道理。所以买显示器不要过分的追求“大”～（扯远了嗷）</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>em是相对单位，相对的是当前对象的文字尺寸，如果文字尺寸未设置，则以浏览器默认字体为准（16px）<br>一般来说，用em的话，会在body选择器中指定一下font-size，统一一下1em的大小<br>另外em有个坑需要注意，它会继承父级元素字体的大小，所以如果父级元素指定了大小，那么子元素的大小需要重新计算一下再指定</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>rem为css3新增的一个单位，也是相对单位，区别于em，它只相对于html根元素，避免了em的父级元素继承特点，所以用rem无后顾之忧，你只需管理根元素的字体大小即可<br><em>注意：只兼容IE8+</em></p><h3 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw/vh"></a>vw/vh</h3><p>vw,vh也是css3新增的单位，也是相对单位，相对的是视窗的大小，100vw等于视窗宽度，100vh等于视窗高度；<br><em>注意：只兼容IE8+</em></p><blockquote><p>具体用哪种单位？<br>根据项目性质决定，web一般使用px，h5一般使用rem，小程序有自己的单位，app不晓得啦，以前我做react-native的时候也是有rn自带的单位</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Set Map</title>
      <link href="/2020/10/21/ES6-Set-Map/"/>
      <url>/2020/10/21/ES6-Set-Map/</url>
      
        <content type="html"><![CDATA[<p>Map,Set是ES6新增的两种数据结构，由于它们的特性，在开发中可以帮我们处理一些特殊情况，带来效率的提升</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set最大的特性是它的元素唯一性，它本身可以存储任何类型的值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//set常用api</span>  <span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span>set<span class="token punctuation">.</span>size<span class="token punctuation">,</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.ldpro.top/set_demo1.png" width="700"><p>唯一性的体现：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span>set<span class="token punctuation">.</span>size<span class="token punctuation">,</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.ldpro.top/set_demo2.png" width="450">很明显，1被成功过滤，但是对象没有被过滤，因为数字是基本类型，对象是引用类型，所以这两个对象本质上是不相等的，这两个概念，不懂的可以百度补一下<p>然后set有一个很常用的功能就是和数组之间的类型转换</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">,</span><span class="token string">'v2'</span><span class="token punctuation">,</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> setArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span>setArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://cdn.ldpro.top/set_demo3.png" width="600"><p>其实看控制台打印发现，Set类似于一个对象，它本身也是一个引用类型</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map是用来保存键值对的，从这一点来看，妥妥的对象特性，但Map和Object不相同的一点是，它的键值可以存储任何值<br>Map和Object的区别：</p><ol><li>Object的键只能是字符串或者Symbols，但Map的键可以是任意值</li><li>Object键值无序，Map键值有序</li><li>Object键值对个数无法查看，Map可查看</li><li>Object有原型链，原型的键名可能会与对象上的键名冲突</li></ol><p>example:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'str-key'</span><span class="token punctuation">,</span><span class="token string">'str-key对应的value'</span><span class="token punctuation">)</span>  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'obj对应的value'</span><span class="token punctuation">)</span>  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'func对应的value'</span><span class="token punctuation">)</span>  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN对应的value'</span><span class="token punctuation">)</span>  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">'null对应的value'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.ldpro.top/map_demo1.png" width="600"><p>也可以用forEach循环键值对：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">' = '</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者用for…of循环</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">' = '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://cdn.ldpro.top/map_demo2.png" width="500"><p><em>但是for…in循环没得用，这一点上，看得出来Map不是纯对象，至少不是可枚举属，还是有差异的</em></p><p>Map对象也是可以和数组之间进行类型转换,但是只能用二维数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span><span class="token string">'value1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">,</span><span class="token string">'value2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> mapArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">' = '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.ldpro.top/map_demo3.png" width="500">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Set/Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端部署个人小记</title>
      <link href="/2020/10/12/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%B0%8F%E8%AE%B0/"/>
      <url>/2020/10/12/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><em>声明：前端部署网上搜索有不少的文章，但是这里列举的是我自己目前用的一些手段，绝对是亲身实践过的(服务器到期，地址目前不可用)</em><br><strong><em>现在博客和某些项目被我部署到github pages，用travis进行CI/CD，对个人开发者来说更加友好</em></strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这里的部署主要分两块：前端和后端；前端指的是我们打出来的dist包，后端指的是一些后端服务，既然这里说的是前端部署，那必须得是node服务了，这个服务部署好之后我们就可以访问它的api了；这样，一个前后端分离的项目就成功部署好了，这里我依据的是我自己部署好的项目：<a href="http://175.24.123.231:8081/">网易云音乐</a>，下面我详细说明</p><h3 id="部署前的准备"><a href="#部署前的准备" class="headerlink" title="部署前的准备"></a>部署前的准备</h3><p>那肯定是需要一台服务器，域名的话，有需求就买一个吧，暂时不需要的话像我一样用ip地址访问其实问题也不大，就是丑一点😂<br>我这里用到的服务器是腾讯云购买的centOS云服务器，然后用的是学生体验套餐，10元/月，我续了一年，目前也够用了；<br><img src="https://cdn.ldpro.top/p1.png" width= 360 /><br>选择服务器时需要注意：一个是操作系统，一个是选择地区；操作系统建议linux，也就是这里选择unbuntu或者centOS，我用的是centOS，地区的话选择离自己最近的地区，速度相应的也会快些<br><img src="https://cdn.ldpro.top/p2.png" width= 360 /><br>买好之后，腾讯云会发送一封站内信，里面有云服务器的登录密码，之后进入云服务器-实例，找到自己刚刚购买的服务器，点击登录<br>登录的话分好几种方式，这里我列举我本人觉得最好用的一种：ssh登录<br><img src="https://cdn.ldpro.top/p3.png" width= 360 /><br>按图示登录之后，我们就可以通过终端来控制云服务器了，首先我们搭建必要的环境：<br>（这里要插一句，如果你不想之后一直用命令行的话，还是装个宝塔面板吧，不然之后上传文件啥的会很烦，这都是本人的血泪史啊～，注意宝塔面板必须在这个阶段装，如果后面安装了nginx啥的就不可以装宝塔面板了）<br>那么我们需要安装git+node，linux环境安装git很简单：<code>yum -y install git</code>，安装node的话，本人用的是重新设置镜像，但是发现node版本不是最新的，这里建议大家跟着网上教程来吧：<a href="https://www.jianshu.com/p/cb29ceb08a2c">https://www.jianshu.com/p/cb29ceb08a2c</a>，这两个装好后，基本的环境就搭建好了</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>对于前端部署而言，后端服务很容易部署，这里需要用到的是pm2以及一个完整的node项目，node项目直接从git拉取，拉下来之后找到对应的启动文件，比如你的启动文件是app.js，正常启动需要运行<code>node app.js</code>，理论上来说，当运行了这个脚本后，就已经可以了，但是不久后你会惊奇的发现，10分钟不到，这个服务莫名其妙的关闭了！没错，这个时候，pm2就来了～<br>pm2是一个node进程管理工具，你可以用它来管理你的node进程，并查看node进程的状态，以及性能监控，负载均衡等。。。<br>pm2小册子：<a href="https://juejin.im/post/6844903710037016584">pm2简易使用手册</a><br>接下来，运行这条命令：<code>pm2 start ./xxx.js</code>，（xxx.js是你的node启动文件），然后你就可以通过<code>pm2 list</code>来查看进程啦～<br>服务跑好之后，测试接口是否可以访问：服务器公网ip+node服务的端口号</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>这里仅记录我自己使用的方式：Linux 系统通过 FTP 上传文件到云服务器；参考文档：<a href="https://cloud.tencent.com/document/product/213/42501">https://cloud.tencent.com/document/product/213/42501</a><br>ftp上传之前，需要确保服务器已经搭建好ftp服务<a href="https://cloud.tencent.com/document/product/213/10912">https://cloud.tencent.com/document/product/213/10912</a><br>照着上面的文档撸就完事了，文件上传好之后，记录下文件在服务器中的位置，这个之后有用；<br>接下来就是配置nginx了，我们通过它的代理功能来让用户可以访问我们的web；<br>linux下安装nginx: <a href="https://www.cnblogs.com/xxoome/p/5866475.html">https://www.cnblogs.com/xxoome/p/5866475.html</a><br>nginx安装好后，修改它的配置文件：nginx.conf，下面是我自己的配置文件：<br><em>这台服务器我部署了四个项目，8081，8082，8083，和80默认端口</em></p><pre class="line-numbers language-nginx.conf" data-language="nginx.conf"><code class="language-nginx.conf"># For more information on configuration, see:#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;# user nginx;  user root;worker_processes auto;error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;pid &#x2F;run&#x2F;nginx.pid;# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.# include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;events &#123;    worker_connections 1024;&#125;http &#123;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 2048;    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;    default_type        application&#x2F;octet-stream;    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include    # for more information.    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;    server &#123;        listen 8081;        server_name localhost1;        root &#x2F;etc&#x2F;nginx&#x2F;wycloud;        charset &#39;utf-8&#39;;        location &#x2F; &#123;        root &#x2F;etc&#x2F;nginx&#x2F;wycloud;        index index.html;        try_files $uri $uri&#x2F; &#x2F;index.html;&#125;location ~.*\.(gif|jpg|jpeg|png|bmp|swf|eot|css|svg|ttf|woff|woff2|properties|json)?$ &#123; access_log off;            root &#x2F;etc&#x2F;nginx&#x2F;wycloud;            expires 30d;            break;        &#125;&#125;    server &#123;        listen       8082;       #listen       [::]:80 default_server;        server_name  localhost2;        root         &#x2F;etc&#x2F;nginx&#x2F;html;        charset &#39;utf-8&#39;;        # Load configuration files for the default server block.        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;        location &#x2F; &#123;root &#x2F;etc&#x2F;nginx&#x2F;html;index index.html;try_files $uri $uri&#x2F; &#x2F;index.html;        &#125; location ~.*\.(gif|jpg|jpeg|png|bmp|swf|eot|svg|ttf|woff|woff2|properties|json)?$ &#123; access_log off;            root &#x2F;etc&#x2F;nginx&#x2F;html;            expires 30d;            break;        &#125;        error_page 404 &#x2F;404.html;            location &#x3D; &#x2F;40x.html &#123;        &#125;        error_page 500 502 503 504 &#x2F;50x.html;            location &#x3D; &#x2F;50x.html &#123;        &#125;    &#125;server &#123;    listen 80;    listen [::]:80;    root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;blog;    server_name lidongss;    location &#x2F; &#123;            # First attempt to serve request as file, then            # as directory, then fall back to displaying a 404.            try_files $uri $uri&#x2F; &#x3D;404;    &#125;   location &#x2F;navigator&#x2F; &#123;        return 302 http:&#x2F;&#x2F;175.24.123.231:8083&#x2F;;        &#125;&#125;server &#123;        listen 8083;        server_name webstack;        charset &#39;utf-8&#39;;        location &#x2F; &#123;        root &#x2F;etc&#x2F;nginx&#x2F;webstack;        index index.html;        try_files $uri $uri&#x2F; &#x2F;index.html;&#125;&#125;# Settings for a TLS enabled server.##    server &#123;#        listen       443 ssl http2 default_server;#        listen       [::]:443 ssl http2 default_server;#        server_name  _;#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;##        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;#        ssl_session_cache shared:SSL:1m;#        ssl_session_timeout  10m;#        ssl_ciphers HIGH:!aNULL:!MD5;#        ssl_prefer_server_ciphers on;##        # Load configuration files for the default server block.#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;##        location &#x2F; &#123;#        &#125;##        error_page 404 &#x2F;404.html;#            location &#x3D; &#x2F;40x.html &#123;#        &#125;##        error_page 500 502 503 504 &#x2F;50x.html;#            location &#x3D; &#x2F;50x.html &#123;#        &#125;#    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx的相关知识还是要稍微学习一下的，对于我们前端部署项目来说，学会基本的代理方法就可以了</p><p>之后每次要更新前端项目的话，<code>cd /xxx</code>进入对应的资源文件夹，执行<code>mdelete *</code>，删除原来所有的包，然后再执行<code>lcd /xx</code>进入你本地的项目文件夹，执行<code>mput *</code>批量上传文件</p><p><em>tip: nginx的坑很多，零基础搞这东西就和盲人摸象一样，差点没把我搞死。。</em><br>下面列举一些我个人常用的命令：</p><ul><li>nginx重启：<code>nginx -s reload</code></li><li>列举当前开放的服务：<code>netstat -ntlp</code></li><li>启动nginx：<code>nginx -c /etc/nginx/nginx.conf</code><br>上传资源的时候，如果是文件夹，会提示权限不够：</li><li>开权限：<code>chown -R ftpuser:ftpuser /var/ftp/test</code>(后面的路径换为文件夹的地址)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端部署 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑神话:悟空</title>
      <link href="/2020/09/30/%E9%BB%91%E7%A5%9E%E8%AF%9D-%E6%82%9F%E7%A9%BA/"/>
      <url>/2020/09/30/%E9%BB%91%E7%A5%9E%E8%AF%9D-%E6%82%9F%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>我TM吹爆!!!</strong><br>在国内低质量手游网游遍地走的大环境下，截止目前，几乎没有什么拿的出手的3A单机游戏，对于一个游戏爱好者来说，惜哉痛哉！<br>而现在，一款大作正在孕育而生！</p><h3 id="游戏截图"><a href="#游戏截图" class="headerlink" title="游戏截图"></a>游戏截图</h3><img src="https://cdn.ldpro.top/wukong.jpeg" width="100%" /><p>《黑神话：悟空》的开发商为游戏科学公司，《战争艺术：赤潮》就是他们开发的手游，也是他们现在主要的收入来源；一个小规模团队可以做出这样的产品，证明他们是有实力和梦想的，也希望他们可以成为国内单机游戏的先驱者，我对这款游戏表示支持!</p><h3 id="宣传视频"><a href="#宣传视频" class="headerlink" title="宣传视频"></a>宣传视频</h3><p><video controls width="100%" src="https://www.heishenhua.com/video/b1/gamesci_wukong.mp4"></video></p><hr><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>游戏官网：<a href="http://www.heishenhua.com/">《黑神话：悟空》</a><br>看了宣传视频后，真的好想玩！不知道我的1660s带不带的动😂</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 国产3A大作 </tag>
            
            <tag> 单机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React性能优化的几种方式</title>
      <link href="/2020/09/22/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/09/22/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>React的性能优化大都是交由用户自己来做的，主要体现在减少不必要的渲染，减少不必要的js计算，从而达到性能优化的目的</p><h3 id="class组件"><a href="#class组件" class="headerlink" title="class组件"></a>class组件</h3><ol><li><p><strong>PureComponent</strong><br>优点：使用方便； 缺点：仅做浅层比较，对于复杂数据结构无法正确识别</p></li><li><p><strong>shouldComponentUpdate</strong><br>这个大家都知道，也是最常用的，前提是不可以用PureComponent<br>使用方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token operator">=></span> boolean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color=red size=2> *不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能；现在React正逐步减少shouldComponentUpdate的重要性 </font></p></li></ol><h3 id="function组件"><a href="#function组件" class="headerlink" title="function组件"></a>function组件</h3><ol><li><strong>React.memo</strong><br>可以这么理解，React.memo = PureComponent + shouldComponentUpdate；因为它也是做浅层对比，也和should一样有具体的手动控制方法<br>不过memo的原理是记忆缓存上一次的渲染结果，而should是直接跳过更新<br>使用方法：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 使用 props 渲染 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color=red size=2>*注意后面的回调函数返回结果和should是相反的</font></p><ol start="2"><li><strong>React.useMemo(Hooks)</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>React官方定义：<blockquote><p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。<br>通俗易懂的解释下：该方法接收两个参数，第一个是一个函数，返回一个值，第二个是他的依赖项，只有当依赖项里的值发生变化了，前面那个函数才会重新计算，否则不会重新计算，套用上次缓存下来的值，避免无用的js计算。</p></blockquote></li></ol><p><em>特地去搭了个服务演示一下，下面是我的代码:</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> setStr<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"yeah"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"重新计算了嗷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token string">"~~"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// const memoValue = React.useMemo(value,[str])</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>在线调试页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变num<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setStr</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变str<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是没有用memo的情况，value的结果完全是跟着str走的，按理说我们想看到的是点击第一个按钮不触发重新计算，但是它计算了，因为React的机制，页面的state改变了，就会重新渲染，那么return里的代码会重新走一遍；<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/3f478f113119cd7a.jpg' width=360 /><br>上图是我分别点击了两个按钮之后触发的console，接下来试试useMemo</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> setStr<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"yeah"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"重新计算了嗷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token string">"~~"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> memoValue <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useMemo</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>在线调试页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span>memoValue<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变num<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setStr</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变str<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次点击两个按钮:<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/0664e7ce9c69d8ed.jpg' width=360 /><br>显然，虽然页面重新渲染了，但是value没有重新计算了，是不是很神奇～<br>例子只是很简单的一个展示，当计算开销大的时候，比如有多次循环或者递归啥的，这性能优化可就明显了</p><ol start="3"><li><strong>React.useCallback</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>和useMemo没什么差别，区别是返回的是一个回调函数，memo返回的是值</li></ol><p>目前想到的就是这些，也是比较常用的，后续有其他的想法会继续更新～</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客介绍</title>
      <link href="/2020/09/21/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/09/21/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>hexo搭建的一个博客，部署在自己的服务器上，接下来可能会买一个域名</p><p>搭博客的目的不为别的，就是闲的。没事的时候我会在上面写一些文章，可能是生活上的琐事，或者是一些技术类文章，或者一些音乐，电影，美剧啥的，甚至可能是一些天马行空的想法。。</p><p>其实很早就有搞一个博客的想法了，程序员也不是非得搞什么技术博客，博客首先就是一个记录分享的平台，也是自己的一个小家。在如今人人都是社畜的时代，与其拼搏一辈子为了一个火柴盒，倒不如把自己这个虚拟的小家好好修缮一下，也算是一种心灵的寄托～，嗯–自己把自己都说动了&gt;&lt;</p><p>总之，更新随缘，大家也就看看图一乐吧</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

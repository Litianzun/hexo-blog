<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React性能优化的几种方式</title>
      <link href="2020/09/22/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2020/09/22/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>React的性能优化大都是交由用户自己来做的，主要体现在减少不必要的渲染，减少不必要的js计算，从而达到性能优化的目的</p><h3 id="class组件"><a href="#class组件" class="headerlink" title="class组件"></a>class组件</h3><ol><li><p><strong>PureComponent</strong><br>优点：使用方便； 缺点：仅做浅层比较，对于复杂数据结构无法正确识别</p></li><li><p><strong>shouldComponentUpdate</strong><br>这个大家都知道，也是最常用的，前提是不可以用PureComponent<br>使用方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token operator">=></span> boolean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color=red size=2> *不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能；现在React正逐步减少shouldComponentUpdate的重要性 </font></p></li></ol><h3 id="function组件"><a href="#function组件" class="headerlink" title="function组件"></a>function组件</h3><ol><li><strong>React.memo</strong><br>可以这么理解，React.memo = PureComponent + shouldComponentUpdate；因为它也是做浅层对比，也和should一样有具体的手动控制方法<br>不过memo的原理是记忆缓存上一次的渲染结果，而should是直接跳过更新<br>使用方法：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 使用 props 渲染 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color=red size=2>*注意后面的回调函数返回结果和should是相反的</font></p><ol start="2"><li><strong>React.useMemo(Hooks)</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>React官方定义：<blockquote><p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。<br>通俗易懂的解释下：该方法接收两个参数，第一个是一个函数，返回一个值，第二个是他的依赖项，只有当依赖项里的值发生变化了，前面那个函数才会重新计算，否则不会重新计算，套用上次缓存下来的值，避免无用的js计算。</p></blockquote></li></ol><p><em>特地去搭了个服务演示一下，下面是我的代码:</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> setStr<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"yeah"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"重新计算了嗷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token string">"~~"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// const memoValue = React.useMemo(value,[str])</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>在线调试页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变num<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setStr</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变str<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是没有用memo的情况，value的结果完全是跟着str走的，按理说我们想看到的是点击第一个按钮不触发重新计算，但是它计算了，因为React的机制，页面的state改变了，就会重新渲染，那么return里的代码会重新走一遍；<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/3f478f113119cd7a.jpg' width=360 /><br>上图是我分别点击了两个按钮之后触发的console，接下来试试useMemo</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> setStr<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"yeah"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"重新计算了嗷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token string">"~~"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> memoValue <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useMemo</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>在线调试页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span>memoValue<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变num<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setStr</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>改变str<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次点击两个按钮:<br><img src = 'https://ftp.bmp.ovh/imgs/2020/09/0664e7ce9c69d8ed.jpg' width=360 /><br>显然，虽然页面重新渲染了，但是value没有重新计算了，是不是很神奇～<br>例子只是很简单的一个展示，当计算开销大的时候，比如有多次循环或者递归啥的，这性能优化可就明显了</p><ol start="3"><li><strong>React.useCallback</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>和useMemo没什么差别，区别是返回的是一个回调函数，memo返回的是值</li></ol><p>目前想到的就是这些，也是比较常用的，后续有其他的想法会继续更新～</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客介绍</title>
      <link href="2020/09/21/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/09/21/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>hexo搭建的一个博客，部署在自己的服务器上，接下来可能会买一个域名</p><p>搭博客的目的不为别的，就是闲的。没事的时候我会在上面写一些文章，可能是生活上的琐事，或者是一些技术类文章，或者一些音乐，电影，美剧啥的，甚至可能是一些天马行空的想法。。</p><p>其实很早就有搞一个博客的想法了，程序员也不是非得搞什么技术博客，博客首先就是一个记录分享的平台，也是自己的一个小家。在中国如今人人都是社畜的时代，与其拼搏一辈子为了一个火柴盒，倒不如把自己这个虚拟的小家好好修缮一下，也算是一种心灵的寄托～，嗯–自己把自己都说动了&gt;&lt;</p><p>总之，更新随缘，大家也就看看图一乐吧</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本语法介绍</title>
      <link href="2020/09/18/markdown%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/09/18/markdown%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><hr><p>这里是一大段文字，主要是文章的主内容<br>普通换行是两个空格+回车;</p><p>直接回车也能换行<br><em>斜体</em> <strong>粗体</strong> <strong><em>又粗又斜</em></strong></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>列表嵌套</p><ol><li>i<ul><li>三到四个空格</li><li>三到四个空格</li></ul></li><li>ii<ul><li>四个空格</li><li>四个空格</li></ul></li></ol><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>区块把它想象成一个带样式的div标签吧，列表可以放区块里，区块也能放列表里，体现在html上是”blockquote”块引用标签</p><blockquote><p>区块来了</p></blockquote><blockquote><p>大<br>区<br>块</p></blockquote><blockquote><p>区块套娃</p><blockquote><p>1</p><blockquote><p>2</p></blockquote></blockquote></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>printf()</code>函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片就直接用img标签吧，还可以调大小<br><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"></p><p>在这里贴个自己项目的链接：<a href="http://175.24.123.231:8081/">网易云音乐</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
